/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { ExpenseReportStatus } from "./ExpenseReportStatus";
import { ExpenseReportLine } from "./ExpenseReportLine";
import { TransactionCurrencyEnum } from "./TransactionCurrencyEnum";
import { ExpenseReportCompany } from "./ExpenseReportCompany";
import { RemoteData } from "./RemoteData";
import { RemoteField } from "./RemoteField";

export const ExpenseReport: core.serialization.ObjectSchema<
    serializers.accounting.ExpenseReport.Raw,
    Merge.accounting.ExpenseReport
> = core.serialization.object({
    id: core.serialization.string().optional(),
    remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
    reportDate: core.serialization.property("report_date", core.serialization.date().optional()),
    reportIdentifier: core.serialization.property("report_identifier", core.serialization.string().optional()),
    employee: core.serialization.string().optional(),
    status: ExpenseReportStatus.optional(),
    totalAmount: core.serialization.property("total_amount", core.serialization.number().optional()),
    lines: core.serialization.list(ExpenseReportLine).optional(),
    currency: TransactionCurrencyEnum.optional(),
    description: core.serialization.string().optional(),
    accountingPeriod: core.serialization.property("accounting_period", core.serialization.string().optional()),
    company: ExpenseReportCompany.optional(),
    trackingCategories: core.serialization.property(
        "tracking_categories",
        core.serialization.list(core.serialization.string()),
    ),
    remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
    fieldMappings: core.serialization.property(
        "field_mappings",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    ),
    remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
    remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteField).optional()),
});

export declare namespace ExpenseReport {
    export interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        report_date?: string | null;
        report_identifier?: string | null;
        employee?: string | null;
        status?: ExpenseReportStatus.Raw | null;
        total_amount?: number | null;
        lines?: ExpenseReportLine.Raw[] | null;
        currency?: TransactionCurrencyEnum.Raw | null;
        description?: string | null;
        accounting_period?: string | null;
        company?: ExpenseReportCompany.Raw | null;
        tracking_categories: string[];
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
        remote_fields?: RemoteField.Raw[] | null;
    }
}
