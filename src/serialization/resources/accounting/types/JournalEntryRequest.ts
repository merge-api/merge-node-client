/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { JournalEntryRequestPaymentsItem } from "./JournalEntryRequestPaymentsItem";
import { JournalEntryRequestCurrency } from "./JournalEntryRequestCurrency";
import { JournalEntryRequestCompany } from "./JournalEntryRequestCompany";
import { JournalEntryRequestTrackingCategoriesItem } from "./JournalEntryRequestTrackingCategoriesItem";
import { JournalLineRequest } from "./JournalLineRequest";
import { JournalEntryRequestPostingStatus } from "./JournalEntryRequestPostingStatus";
import { RemoteFieldRequest } from "./RemoteFieldRequest";

export const JournalEntryRequest: core.serialization.ObjectSchema<
    serializers.accounting.JournalEntryRequest.Raw,
    Merge.accounting.JournalEntryRequest
> = core.serialization.object({
    transactionDate: core.serialization.property("transaction_date", core.serialization.date().optional()),
    payments: core.serialization.list(JournalEntryRequestPaymentsItem.optional()).optional(),
    memo: core.serialization.string().optional(),
    currency: JournalEntryRequestCurrency.optional(),
    exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
    company: JournalEntryRequestCompany.optional(),
    trackingCategories: core.serialization.property(
        "tracking_categories",
        core.serialization.list(JournalEntryRequestTrackingCategoriesItem.optional()).optional()
    ),
    inclusiveOfTax: core.serialization.property("inclusive_of_tax", core.serialization.boolean().optional()),
    lines: core.serialization.list(JournalLineRequest).optional(),
    journalNumber: core.serialization.property("journal_number", core.serialization.string().optional()),
    postingStatus: core.serialization.property("posting_status", JournalEntryRequestPostingStatus.optional()),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteFieldRequest).optional()),
});

export declare namespace JournalEntryRequest {
    interface Raw {
        transaction_date?: string | null;
        payments?: (JournalEntryRequestPaymentsItem.Raw | null | undefined)[] | null;
        memo?: string | null;
        currency?: JournalEntryRequestCurrency.Raw | null;
        exchange_rate?: string | null;
        company?: JournalEntryRequestCompany.Raw | null;
        tracking_categories?: (JournalEntryRequestTrackingCategoriesItem.Raw | null | undefined)[] | null;
        inclusive_of_tax?: boolean | null;
        lines?: JournalLineRequest.Raw[] | null;
        journal_number?: string | null;
        posting_status?: JournalEntryRequestPostingStatus.Raw | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
        remote_fields?: RemoteFieldRequest.Raw[] | null;
    }
}
