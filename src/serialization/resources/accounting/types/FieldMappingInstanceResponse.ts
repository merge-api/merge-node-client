/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const FieldMappingInstanceResponse: core.serialization.ObjectSchema<
    serializers.accounting.FieldMappingInstanceResponse.Raw,
    Merge.accounting.FieldMappingInstanceResponse
> = core.serialization.object({
    model: core.serialization.lazyObject(async () => (await import("../../..")).accounting.FieldMappingApiInstance),
    warnings: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../..")).accounting.WarningValidationProblem)
    ),
    errors: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../..")).accounting.ErrorValidationProblem)
    ),
    logs: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).accounting.DebugModeLog))
        .optional(),
});

export declare namespace FieldMappingInstanceResponse {
    interface Raw {
        model: serializers.accounting.FieldMappingApiInstance.Raw;
        warnings: serializers.accounting.WarningValidationProblem.Raw[];
        errors: serializers.accounting.ErrorValidationProblem.Raw[];
        logs?: serializers.accounting.DebugModeLog.Raw[] | null;
    }
}
