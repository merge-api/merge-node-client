/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { PatchedPaymentRequestContact } from "./PatchedPaymentRequestContact";
import { PatchedPaymentRequestAccount } from "./PatchedPaymentRequestAccount";
import { PatchedPaymentRequestCurrency } from "./PatchedPaymentRequestCurrency";
import { PatchedPaymentRequestCompany } from "./PatchedPaymentRequestCompany";
import { PatchedPaymentRequestType } from "./PatchedPaymentRequestType";
import { PatchedPaymentRequestTrackingCategoriesItem } from "./PatchedPaymentRequestTrackingCategoriesItem";
import { PatchedPaymentRequestAccountingPeriod } from "./PatchedPaymentRequestAccountingPeriod";
import { PatchedPaymentRequestAppliedToLinesItem } from "./PatchedPaymentRequestAppliedToLinesItem";
import { RemoteFieldRequest } from "./RemoteFieldRequest";

export const PatchedPaymentRequest: core.serialization.ObjectSchema<
    serializers.accounting.PatchedPaymentRequest.Raw,
    Merge.accounting.PatchedPaymentRequest
> = core.serialization.object({
    transactionDate: core.serialization.property("transaction_date", core.serialization.date().optional()),
    contact: PatchedPaymentRequestContact.optional(),
    account: PatchedPaymentRequestAccount.optional(),
    currency: PatchedPaymentRequestCurrency.optional(),
    exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
    company: PatchedPaymentRequestCompany.optional(),
    totalAmount: core.serialization.property("total_amount", core.serialization.number().optional()),
    type: PatchedPaymentRequestType.optional(),
    trackingCategories: core.serialization.property(
        "tracking_categories",
        core.serialization.list(PatchedPaymentRequestTrackingCategoriesItem.optional()).optional()
    ),
    accountingPeriod: core.serialization.property(
        "accounting_period",
        PatchedPaymentRequestAccountingPeriod.optional()
    ),
    appliedToLines: core.serialization.property(
        "applied_to_lines",
        core.serialization.list(PatchedPaymentRequestAppliedToLinesItem).optional()
    ),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteFieldRequest).optional()),
});

export declare namespace PatchedPaymentRequest {
    interface Raw {
        transaction_date?: string | null;
        contact?: PatchedPaymentRequestContact.Raw | null;
        account?: PatchedPaymentRequestAccount.Raw | null;
        currency?: PatchedPaymentRequestCurrency.Raw | null;
        exchange_rate?: string | null;
        company?: PatchedPaymentRequestCompany.Raw | null;
        total_amount?: number | null;
        type?: PatchedPaymentRequestType.Raw | null;
        tracking_categories?: (PatchedPaymentRequestTrackingCategoriesItem.Raw | null | undefined)[] | null;
        accounting_period?: PatchedPaymentRequestAccountingPeriod.Raw | null;
        applied_to_lines?: PatchedPaymentRequestAppliedToLinesItem.Raw[] | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
        remote_fields?: RemoteFieldRequest.Raw[] | null;
    }
}
