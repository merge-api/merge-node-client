/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const PatchedPaymentRequest: core.serialization.ObjectSchema<
    serializers.accounting.PatchedPaymentRequest.Raw,
    Merge.accounting.PatchedPaymentRequest
> = core.serialization.object({
    transactionDate: core.serialization.property("transaction_date", core.serialization.date().optional()),
    contact: core.serialization
        .lazy(async () => (await import("../../..")).accounting.PatchedPaymentRequestContact)
        .optional(),
    account: core.serialization
        .lazy(async () => (await import("../../..")).accounting.PatchedPaymentRequestAccount)
        .optional(),
    currency: core.serialization
        .lazy(async () => (await import("../../..")).accounting.PatchedPaymentRequestCurrency)
        .optional(),
    exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
    company: core.serialization
        .lazy(async () => (await import("../../..")).accounting.PatchedPaymentRequestCompany)
        .optional(),
    totalAmount: core.serialization.property("total_amount", core.serialization.number().optional()),
    trackingCategories: core.serialization.property(
        "tracking_categories",
        core.serialization
            .list(
                core.serialization
                    .lazy(async () => (await import("../../..")).accounting.PatchedPaymentRequestTrackingCategoriesItem)
                    .optional()
            )
            .optional()
    ),
    accountingPeriod: core.serialization.property(
        "accounting_period",
        core.serialization
            .lazy(async () => (await import("../../..")).accounting.PatchedPaymentRequestAccountingPeriod)
            .optional()
    ),
    appliedToLines: core.serialization.property(
        "applied_to_lines",
        core.serialization
            .list(
                core.serialization.lazy(
                    async () => (await import("../../..")).accounting.PatchedPaymentRequestAppliedToLinesItem
                )
            )
            .optional()
    ),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
});

export declare namespace PatchedPaymentRequest {
    interface Raw {
        transaction_date?: string | null;
        contact?: serializers.accounting.PatchedPaymentRequestContact.Raw | null;
        account?: serializers.accounting.PatchedPaymentRequestAccount.Raw | null;
        currency?: serializers.accounting.PatchedPaymentRequestCurrency.Raw | null;
        exchange_rate?: string | null;
        company?: serializers.accounting.PatchedPaymentRequestCompany.Raw | null;
        total_amount?: number | null;
        tracking_categories?:
            | (serializers.accounting.PatchedPaymentRequestTrackingCategoriesItem.Raw | null | undefined)[]
            | null;
        accounting_period?: serializers.accounting.PatchedPaymentRequestAccountingPeriod.Raw | null;
        applied_to_lines?: serializers.accounting.PatchedPaymentRequestAppliedToLinesItem.Raw[] | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
    }
}
