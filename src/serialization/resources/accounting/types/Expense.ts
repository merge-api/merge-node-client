/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { ExpenseAccount } from "./ExpenseAccount";
import { ExpenseContact } from "./ExpenseContact";
import { ExpenseCurrency } from "./ExpenseCurrency";
import { ExpenseCompany } from "./ExpenseCompany";
import { ExpenseEmployee } from "./ExpenseEmployee";
import { ExpenseLine } from "./ExpenseLine";
import { ExpenseTrackingCategoriesItem } from "./ExpenseTrackingCategoriesItem";
import { ExpenseAccountingPeriod } from "./ExpenseAccountingPeriod";
import { RemoteData } from "./RemoteData";
import { RemoteField } from "./RemoteField";

export const Expense: core.serialization.ObjectSchema<serializers.accounting.Expense.Raw, Merge.accounting.Expense> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
        transactionDate: core.serialization.property("transaction_date", core.serialization.date().optional()),
        remoteCreatedAt: core.serialization.property("remote_created_at", core.serialization.date().optional()),
        account: ExpenseAccount.optional(),
        contact: ExpenseContact.optional(),
        totalAmount: core.serialization.property("total_amount", core.serialization.number().optional()),
        subTotal: core.serialization.property("sub_total", core.serialization.number().optional()),
        totalTaxAmount: core.serialization.property("total_tax_amount", core.serialization.number().optional()),
        currency: ExpenseCurrency.optional(),
        exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
        inclusiveOfTax: core.serialization.property("inclusive_of_tax", core.serialization.boolean().optional()),
        company: ExpenseCompany.optional(),
        employee: ExpenseEmployee.optional(),
        memo: core.serialization.string().optional(),
        lines: core.serialization.list(ExpenseLine).optional(),
        trackingCategories: core.serialization.property(
            "tracking_categories",
            core.serialization.list(ExpenseTrackingCategoriesItem.optional()).optional(),
        ),
        remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
        accountingPeriod: core.serialization.property("accounting_period", ExpenseAccountingPeriod.optional()),
        fieldMappings: core.serialization.property(
            "field_mappings",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        ),
        remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
        remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteField).optional()),
    });

export declare namespace Expense {
    export interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        transaction_date?: string | null;
        remote_created_at?: string | null;
        account?: ExpenseAccount.Raw | null;
        contact?: ExpenseContact.Raw | null;
        total_amount?: number | null;
        sub_total?: number | null;
        total_tax_amount?: number | null;
        currency?: ExpenseCurrency.Raw | null;
        exchange_rate?: string | null;
        inclusive_of_tax?: boolean | null;
        company?: ExpenseCompany.Raw | null;
        employee?: ExpenseEmployee.Raw | null;
        memo?: string | null;
        lines?: ExpenseLine.Raw[] | null;
        tracking_categories?: (ExpenseTrackingCategoriesItem.Raw | null | undefined)[] | null;
        remote_was_deleted?: boolean | null;
        accounting_period?: ExpenseAccountingPeriod.Raw | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
        remote_fields?: RemoteField.Raw[] | null;
    }
}
