/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { InvoiceType } from "./InvoiceType";
import { InvoiceContact } from "./InvoiceContact";
import { InvoiceCompany } from "./InvoiceCompany";
import { InvoiceEmployee } from "./InvoiceEmployee";
import { InvoiceCurrency } from "./InvoiceCurrency";
import { InvoiceStatus } from "./InvoiceStatus";
import { InvoiceTrackingCategoriesItem } from "./InvoiceTrackingCategoriesItem";
import { InvoiceAccountingPeriod } from "./InvoiceAccountingPeriod";
import { InvoicePurchaseOrdersItem } from "./InvoicePurchaseOrdersItem";
import { InvoicePaymentsItem } from "./InvoicePaymentsItem";
import { InvoiceAppliedPaymentsItem } from "./InvoiceAppliedPaymentsItem";
import { InvoiceLineItem } from "./InvoiceLineItem";
import { RemoteData } from "./RemoteData";
import { RemoteField } from "./RemoteField";

export const Invoice: core.serialization.ObjectSchema<serializers.accounting.Invoice.Raw, Merge.accounting.Invoice> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
        type: InvoiceType.optional(),
        contact: InvoiceContact.optional(),
        number: core.serialization.string().optional(),
        issueDate: core.serialization.property("issue_date", core.serialization.date().optional()),
        dueDate: core.serialization.property("due_date", core.serialization.date().optional()),
        paidOnDate: core.serialization.property("paid_on_date", core.serialization.date().optional()),
        memo: core.serialization.string().optional(),
        company: InvoiceCompany.optional(),
        employee: InvoiceEmployee.optional(),
        currency: InvoiceCurrency.optional(),
        exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
        totalDiscount: core.serialization.property("total_discount", core.serialization.number().optional()),
        subTotal: core.serialization.property("sub_total", core.serialization.number().optional()),
        status: InvoiceStatus.optional(),
        totalTaxAmount: core.serialization.property("total_tax_amount", core.serialization.number().optional()),
        totalAmount: core.serialization.property("total_amount", core.serialization.number().optional()),
        balance: core.serialization.number().optional(),
        remoteUpdatedAt: core.serialization.property("remote_updated_at", core.serialization.date().optional()),
        trackingCategories: core.serialization.property(
            "tracking_categories",
            core.serialization.list(InvoiceTrackingCategoriesItem.optional()).optional()
        ),
        accountingPeriod: core.serialization.property("accounting_period", InvoiceAccountingPeriod.optional()),
        purchaseOrders: core.serialization.property(
            "purchase_orders",
            core.serialization.list(InvoicePurchaseOrdersItem.optional()).optional()
        ),
        payments: core.serialization.list(InvoicePaymentsItem.optional()).optional(),
        appliedPayments: core.serialization.property(
            "applied_payments",
            core.serialization.list(InvoiceAppliedPaymentsItem.optional()).optional()
        ),
        lineItems: core.serialization.property("line_items", core.serialization.list(InvoiceLineItem).optional()),
        appliedCreditNotes: core.serialization.property(
            "applied_credit_notes",
            core.serialization
                .list(core.serialization.lazy(() => serializers.accounting.InvoiceAppliedCreditNotesItem))
                .optional()
        ),
        appliedVendorCredits: core.serialization.property(
            "applied_vendor_credits",
            core.serialization
                .list(core.serialization.lazy(() => serializers.accounting.InvoiceAppliedVendorCreditsItem))
                .optional()
        ),
        inclusiveOfTax: core.serialization.property("inclusive_of_tax", core.serialization.boolean().optional()),
        remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
        fieldMappings: core.serialization.property(
            "field_mappings",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
        ),
        remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
        remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteField).optional()),
    });

export declare namespace Invoice {
    interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        type?: InvoiceType.Raw | null;
        contact?: InvoiceContact.Raw | null;
        number?: string | null;
        issue_date?: string | null;
        due_date?: string | null;
        paid_on_date?: string | null;
        memo?: string | null;
        company?: InvoiceCompany.Raw | null;
        employee?: InvoiceEmployee.Raw | null;
        currency?: InvoiceCurrency.Raw | null;
        exchange_rate?: string | null;
        total_discount?: number | null;
        sub_total?: number | null;
        status?: InvoiceStatus.Raw | null;
        total_tax_amount?: number | null;
        total_amount?: number | null;
        balance?: number | null;
        remote_updated_at?: string | null;
        tracking_categories?: (InvoiceTrackingCategoriesItem.Raw | null | undefined)[] | null;
        accounting_period?: InvoiceAccountingPeriod.Raw | null;
        purchase_orders?: (InvoicePurchaseOrdersItem.Raw | null | undefined)[] | null;
        payments?: (InvoicePaymentsItem.Raw | null | undefined)[] | null;
        applied_payments?: (InvoiceAppliedPaymentsItem.Raw | null | undefined)[] | null;
        line_items?: InvoiceLineItem.Raw[] | null;
        applied_credit_notes?: serializers.accounting.InvoiceAppliedCreditNotesItem.Raw[] | null;
        applied_vendor_credits?: serializers.accounting.InvoiceAppliedVendorCreditsItem.Raw[] | null;
        inclusive_of_tax?: boolean | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
        remote_fields?: RemoteField.Raw[] | null;
    }
}
