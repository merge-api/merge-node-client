/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const PaymentRequest: core.serialization.ObjectSchema<
    serializers.accounting.PaymentRequest.Raw,
    Merge.accounting.PaymentRequest
> = core.serialization.object({
    transactionDate: core.serialization.property("transaction_date", core.serialization.date().optional()),
    contact: core.serialization
        .lazy(async () => (await import("../../..")).accounting.PaymentRequestContact)
        .optional(),
    account: core.serialization
        .lazy(async () => (await import("../../..")).accounting.PaymentRequestAccount)
        .optional(),
    currency: core.serialization
        .lazy(async () => (await import("../../..")).accounting.PaymentRequestCurrency)
        .optional(),
    exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
    company: core.serialization
        .lazy(async () => (await import("../../..")).accounting.PaymentRequestCompany)
        .optional(),
    totalAmount: core.serialization.property("total_amount", core.serialization.number().optional()),
    type: core.serialization.lazy(async () => (await import("../../..")).accounting.PaymentRequestType).optional(),
    trackingCategories: core.serialization.property(
        "tracking_categories",
        core.serialization
            .list(
                core.serialization
                    .lazy(async () => (await import("../../..")).accounting.PaymentRequestTrackingCategoriesItem)
                    .optional()
            )
            .optional()
    ),
    accountingPeriod: core.serialization.property(
        "accounting_period",
        core.serialization
            .lazy(async () => (await import("../../..")).accounting.PaymentRequestAccountingPeriod)
            .optional()
    ),
    appliedToLines: core.serialization.property(
        "applied_to_lines",
        core.serialization
            .list(
                core.serialization.lazy(
                    async () => (await import("../../..")).accounting.PaymentRequestAppliedToLinesItem
                )
            )
            .optional()
    ),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    remoteFields: core.serialization.property(
        "remote_fields",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).accounting.RemoteFieldRequest))
            .optional()
    ),
});

export declare namespace PaymentRequest {
    interface Raw {
        transaction_date?: string | null;
        contact?: serializers.accounting.PaymentRequestContact.Raw | null;
        account?: serializers.accounting.PaymentRequestAccount.Raw | null;
        currency?: serializers.accounting.PaymentRequestCurrency.Raw | null;
        exchange_rate?: string | null;
        company?: serializers.accounting.PaymentRequestCompany.Raw | null;
        total_amount?: number | null;
        type?: serializers.accounting.PaymentRequestType.Raw | null;
        tracking_categories?:
            | (serializers.accounting.PaymentRequestTrackingCategoriesItem.Raw | null | undefined)[]
            | null;
        accounting_period?: serializers.accounting.PaymentRequestAccountingPeriod.Raw | null;
        applied_to_lines?: serializers.accounting.PaymentRequestAppliedToLinesItem.Raw[] | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
        remote_fields?: serializers.accounting.RemoteFieldRequest.Raw[] | null;
    }
}
