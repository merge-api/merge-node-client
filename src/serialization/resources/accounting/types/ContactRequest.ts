/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const ContactRequest: core.serialization.ObjectSchema<
    serializers.accounting.ContactRequest.Raw,
    Merge.accounting.ContactRequest
> = core.serialization.object({
    name: core.serialization.string().optional(),
    isSupplier: core.serialization.property("is_supplier", core.serialization.boolean().optional()),
    isCustomer: core.serialization.property("is_customer", core.serialization.boolean().optional()),
    emailAddress: core.serialization.property("email_address", core.serialization.string().optional()),
    taxNumber: core.serialization.property("tax_number", core.serialization.string().optional()),
    status: core.serialization.lazy(async () => (await import("../../..")).accounting.ContactRequestStatus).optional(),
    currency: core.serialization.string().optional(),
    company: core.serialization.string().optional(),
    addresses: core.serialization
        .list(
            core.serialization
                .lazy(async () => (await import("../../..")).accounting.ContactRequestAddressesItem)
                .optional()
        )
        .optional(),
    phoneNumbers: core.serialization.property(
        "phone_numbers",
        core.serialization
            .list(
                core.serialization.lazyObject(
                    async () => (await import("../../..")).accounting.AccountingPhoneNumberRequest
                )
            )
            .optional()
    ),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    remoteFields: core.serialization.property(
        "remote_fields",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).accounting.RemoteFieldRequest))
            .optional()
    ),
});

export declare namespace ContactRequest {
    interface Raw {
        name?: string | null;
        is_supplier?: boolean | null;
        is_customer?: boolean | null;
        email_address?: string | null;
        tax_number?: string | null;
        status?: serializers.accounting.ContactRequestStatus.Raw | null;
        currency?: string | null;
        company?: string | null;
        addresses?: (serializers.accounting.ContactRequestAddressesItem.Raw | null | undefined)[] | null;
        phone_numbers?: serializers.accounting.AccountingPhoneNumberRequest.Raw[] | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
        remote_fields?: serializers.accounting.RemoteFieldRequest.Raw[] | null;
    }
}
