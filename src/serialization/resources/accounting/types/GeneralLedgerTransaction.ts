/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { GeneralLedgerTransactionUnderlyingTransactionType } from "./GeneralLedgerTransactionUnderlyingTransactionType";
import { GeneralLedgerTransactionAccountingPeriod } from "./GeneralLedgerTransactionAccountingPeriod";
import { GeneralLedgerTransactionCompany } from "./GeneralLedgerTransactionCompany";
import { GeneralLedgerTransactionTrackingCategoriesItem } from "./GeneralLedgerTransactionTrackingCategoriesItem";
import { GeneralLedgerTransactionGeneralLedgerTransactionLinesItem } from "./GeneralLedgerTransactionGeneralLedgerTransactionLinesItem";
import { RemoteData } from "./RemoteData";

export const GeneralLedgerTransaction: core.serialization.ObjectSchema<
    serializers.accounting.GeneralLedgerTransaction.Raw,
    Merge.accounting.GeneralLedgerTransaction
> = core.serialization.object({
    id: core.serialization.string().optional(),
    remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
    underlyingTransactionRemoteId: core.serialization.property(
        "underlying_transaction_remote_id",
        core.serialization.string().optional(),
    ),
    underlyingTransactionType: core.serialization.property(
        "underlying_transaction_type",
        GeneralLedgerTransactionUnderlyingTransactionType.optional(),
    ),
    accountingPeriod: core.serialization.property(
        "accounting_period",
        GeneralLedgerTransactionAccountingPeriod.optional(),
    ),
    company: GeneralLedgerTransactionCompany.optional(),
    remoteUpdatedAt: core.serialization.property("remote_updated_at", core.serialization.date().optional()),
    remoteCreatedAt: core.serialization.property("remote_created_at", core.serialization.date().optional()),
    trackingCategories: core.serialization.property(
        "tracking_categories",
        core.serialization.list(GeneralLedgerTransactionTrackingCategoriesItem.optional()).optional(),
    ),
    postingDate: core.serialization.property("posting_date", core.serialization.date().optional()),
    generalLedgerTransactionLines: core.serialization.property(
        "general_ledger_transaction_lines",
        core.serialization.list(GeneralLedgerTransactionGeneralLedgerTransactionLinesItem).optional(),
    ),
    remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
    fieldMappings: core.serialization.property(
        "field_mappings",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    ),
    remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
});

export declare namespace GeneralLedgerTransaction {
    export interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        underlying_transaction_remote_id?: string | null;
        underlying_transaction_type?: GeneralLedgerTransactionUnderlyingTransactionType.Raw | null;
        accounting_period?: GeneralLedgerTransactionAccountingPeriod.Raw | null;
        company?: GeneralLedgerTransactionCompany.Raw | null;
        remote_updated_at?: string | null;
        remote_created_at?: string | null;
        tracking_categories?: (GeneralLedgerTransactionTrackingCategoriesItem.Raw | null | undefined)[] | null;
        posting_date?: string | null;
        general_ledger_transaction_lines?: GeneralLedgerTransactionGeneralLedgerTransactionLinesItem.Raw[] | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
    }
}
