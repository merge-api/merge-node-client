/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { PaymentContact } from "./PaymentContact";
import { PaymentAccount } from "./PaymentAccount";
import { PaymentCurrency } from "./PaymentCurrency";
import { PaymentCompany } from "./PaymentCompany";
import { PaymentType } from "./PaymentType";
import { PaymentTrackingCategoriesItem } from "./PaymentTrackingCategoriesItem";
import { PaymentAccountingPeriod } from "./PaymentAccountingPeriod";
import { PaymentAppliedToLinesItem } from "./PaymentAppliedToLinesItem";
import { RemoteData } from "./RemoteData";
import { RemoteField } from "./RemoteField";

export const Payment: core.serialization.ObjectSchema<serializers.accounting.Payment.Raw, Merge.accounting.Payment> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
        transactionDate: core.serialization.property("transaction_date", core.serialization.date().optional()),
        contact: PaymentContact.optional(),
        account: PaymentAccount.optional(),
        currency: PaymentCurrency.optional(),
        exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
        company: PaymentCompany.optional(),
        totalAmount: core.serialization.property("total_amount", core.serialization.number().optional()),
        type: PaymentType.optional(),
        trackingCategories: core.serialization.property(
            "tracking_categories",
            core.serialization.list(PaymentTrackingCategoriesItem.optional()).optional()
        ),
        accountingPeriod: core.serialization.property("accounting_period", PaymentAccountingPeriod.optional()),
        appliedToLines: core.serialization.property(
            "applied_to_lines",
            core.serialization.list(PaymentAppliedToLinesItem).optional()
        ),
        remoteUpdatedAt: core.serialization.property("remote_updated_at", core.serialization.date().optional()),
        remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
        fieldMappings: core.serialization.property(
            "field_mappings",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
        ),
        remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
        remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteField).optional()),
    });

export declare namespace Payment {
    interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        transaction_date?: string | null;
        contact?: PaymentContact.Raw | null;
        account?: PaymentAccount.Raw | null;
        currency?: PaymentCurrency.Raw | null;
        exchange_rate?: string | null;
        company?: PaymentCompany.Raw | null;
        total_amount?: number | null;
        type?: PaymentType.Raw | null;
        tracking_categories?: (PaymentTrackingCategoriesItem.Raw | null | undefined)[] | null;
        accounting_period?: PaymentAccountingPeriod.Raw | null;
        applied_to_lines?: PaymentAppliedToLinesItem.Raw[] | null;
        remote_updated_at?: string | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
        remote_fields?: RemoteField.Raw[] | null;
    }
}
