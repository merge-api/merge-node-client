/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { ExpenseRequestAccount } from "./ExpenseRequestAccount";
import { ExpenseRequestContact } from "./ExpenseRequestContact";
import { ExpenseRequestCurrency } from "./ExpenseRequestCurrency";
import { ExpenseRequestCompany } from "./ExpenseRequestCompany";
import { ExpenseLineRequest } from "./ExpenseLineRequest";
import { ExpenseRequestTrackingCategoriesItem } from "./ExpenseRequestTrackingCategoriesItem";
import { ExpenseRequestAccountingPeriod } from "./ExpenseRequestAccountingPeriod";
import { RemoteFieldRequest } from "./RemoteFieldRequest";

export const ExpenseRequest: core.serialization.ObjectSchema<
    serializers.accounting.ExpenseRequest.Raw,
    Merge.accounting.ExpenseRequest
> = core.serialization.object({
    transactionDate: core.serialization.property("transaction_date", core.serialization.date().optional()),
    account: ExpenseRequestAccount.optional(),
    contact: ExpenseRequestContact.optional(),
    totalAmount: core.serialization.property("total_amount", core.serialization.number().optional()),
    subTotal: core.serialization.property("sub_total", core.serialization.number().optional()),
    totalTaxAmount: core.serialization.property("total_tax_amount", core.serialization.number().optional()),
    currency: ExpenseRequestCurrency.optional(),
    exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
    inclusiveOfTax: core.serialization.property("inclusive_of_tax", core.serialization.boolean().optional()),
    company: ExpenseRequestCompany.optional(),
    memo: core.serialization.string().optional(),
    lines: core.serialization.list(ExpenseLineRequest).optional(),
    trackingCategories: core.serialization.property(
        "tracking_categories",
        core.serialization.list(ExpenseRequestTrackingCategoriesItem.optional()).optional()
    ),
    accountingPeriod: core.serialization.property("accounting_period", ExpenseRequestAccountingPeriod.optional()),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteFieldRequest).optional()),
});

export declare namespace ExpenseRequest {
    interface Raw {
        transaction_date?: string | null;
        account?: ExpenseRequestAccount.Raw | null;
        contact?: ExpenseRequestContact.Raw | null;
        total_amount?: number | null;
        sub_total?: number | null;
        total_tax_amount?: number | null;
        currency?: ExpenseRequestCurrency.Raw | null;
        exchange_rate?: string | null;
        inclusive_of_tax?: boolean | null;
        company?: ExpenseRequestCompany.Raw | null;
        memo?: string | null;
        lines?: ExpenseLineRequest.Raw[] | null;
        tracking_categories?: (ExpenseRequestTrackingCategoriesItem.Raw | null | undefined)[] | null;
        accounting_period?: ExpenseRequestAccountingPeriod.Raw | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
        remote_fields?: RemoteFieldRequest.Raw[] | null;
    }
}
