/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { ExpenseReportLineAccount } from "./ExpenseReportLineAccount";
import { TransactionCurrencyEnum } from "./TransactionCurrencyEnum";
import { ExpenseReportLineEmployee } from "./ExpenseReportLineEmployee";
import { ExpenseReportLineProject } from "./ExpenseReportLineProject";
import { ExpenseReportLineCompany } from "./ExpenseReportLineCompany";
import { ExpenseReportLineContact } from "./ExpenseReportLineContact";
import { ExpenseReportLineTaxRate } from "./ExpenseReportLineTaxRate";
import { RemoteField } from "./RemoteField";

export const ExpenseReportLine: core.serialization.ObjectSchema<
    serializers.accounting.ExpenseReportLine.Raw,
    Merge.accounting.ExpenseReportLine
> = core.serialization.object({
    id: core.serialization.string().optional(),
    remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
    account: ExpenseReportLineAccount.optional(),
    description: core.serialization.string().optional(),
    expenseDate: core.serialization.property("expense_date", core.serialization.date().optional()),
    amount: core.serialization.number().optional(),
    currency: TransactionCurrencyEnum.optional(),
    exchangeRate: core.serialization.property("exchange_rate", core.serialization.string().optional()),
    isBillable: core.serialization.property("is_billable", core.serialization.boolean().optional()),
    trackingCategories: core.serialization.property(
        "tracking_categories",
        core.serialization.list(core.serialization.string()),
    ),
    employee: ExpenseReportLineEmployee.optional(),
    project: ExpenseReportLineProject.optional(),
    company: ExpenseReportLineCompany.optional(),
    contact: ExpenseReportLineContact.optional(),
    quantity: core.serialization.number().optional(),
    unitPrice: core.serialization.property("unit_price", core.serialization.number().optional()),
    nonReimbursable: core.serialization.property("non_reimbursable", core.serialization.boolean().optional()),
    taxAmount: core.serialization.property("tax_amount", core.serialization.number().optional()),
    inclusiveOfTax: core.serialization.property("inclusive_of_tax", core.serialization.boolean().optional()),
    taxRate: core.serialization.property("tax_rate", ExpenseReportLineTaxRate.optional()),
    remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
    remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteField).optional()),
});

export declare namespace ExpenseReportLine {
    export interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        account?: ExpenseReportLineAccount.Raw | null;
        description?: string | null;
        expense_date?: string | null;
        amount?: number | null;
        currency?: TransactionCurrencyEnum.Raw | null;
        exchange_rate?: string | null;
        is_billable?: boolean | null;
        tracking_categories: string[];
        employee?: ExpenseReportLineEmployee.Raw | null;
        project?: ExpenseReportLineProject.Raw | null;
        company?: ExpenseReportLineCompany.Raw | null;
        contact?: ExpenseReportLineContact.Raw | null;
        quantity?: number | null;
        unit_price?: number | null;
        non_reimbursable?: boolean | null;
        tax_amount?: number | null;
        inclusive_of_tax?: boolean | null;
        tax_rate?: ExpenseReportLineTaxRate.Raw | null;
        remote_was_deleted?: boolean | null;
        remote_fields?: RemoteField.Raw[] | null;
    }
}
