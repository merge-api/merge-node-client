/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { IncomeStatementCurrency } from "./IncomeStatementCurrency";
import { IncomeStatementCompany } from "./IncomeStatementCompany";
import { ReportItem } from "./ReportItem";
import { RemoteData } from "./RemoteData";

export const IncomeStatement: core.serialization.ObjectSchema<
    serializers.accounting.IncomeStatement.Raw,
    Merge.accounting.IncomeStatement
> = core.serialization.object({
    id: core.serialization.string().optional(),
    remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
    name: core.serialization.string().optional(),
    currency: IncomeStatementCurrency.optional(),
    company: IncomeStatementCompany.optional(),
    startPeriod: core.serialization.property("start_period", core.serialization.date().optional()),
    endPeriod: core.serialization.property("end_period", core.serialization.date().optional()),
    income: core.serialization.list(ReportItem).optional(),
    costOfSales: core.serialization.property("cost_of_sales", core.serialization.list(ReportItem).optional()),
    grossProfit: core.serialization.property("gross_profit", core.serialization.number().optional()),
    operatingExpenses: core.serialization.property(
        "operating_expenses",
        core.serialization.list(ReportItem).optional()
    ),
    netOperatingIncome: core.serialization.property("net_operating_income", core.serialization.number().optional()),
    nonOperatingExpenses: core.serialization.property(
        "non_operating_expenses",
        core.serialization.list(ReportItem).optional()
    ),
    netIncome: core.serialization.property("net_income", core.serialization.number().optional()),
    remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
    fieldMappings: core.serialization.property(
        "field_mappings",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
});

export declare namespace IncomeStatement {
    interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        name?: string | null;
        currency?: IncomeStatementCurrency.Raw | null;
        company?: IncomeStatementCompany.Raw | null;
        start_period?: string | null;
        end_period?: string | null;
        income?: ReportItem.Raw[] | null;
        cost_of_sales?: ReportItem.Raw[] | null;
        gross_profit?: number | null;
        operating_expenses?: ReportItem.Raw[] | null;
        net_operating_income?: number | null;
        non_operating_expenses?: ReportItem.Raw[] | null;
        net_income?: number | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
    }
}
