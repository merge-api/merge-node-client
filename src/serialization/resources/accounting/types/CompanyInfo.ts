/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const CompanyInfo: core.serialization.ObjectSchema<
    serializers.accounting.CompanyInfo.Raw,
    Merge.accounting.CompanyInfo
> = core.serialization.object({
    id: core.serialization.string().optional(),
    remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
    name: core.serialization.string().optional(),
    legalName: core.serialization.property("legal_name", core.serialization.string().optional()),
    taxNumber: core.serialization.property("tax_number", core.serialization.string().optional()),
    fiscalYearEndMonth: core.serialization.property("fiscal_year_end_month", core.serialization.number().optional()),
    fiscalYearEndDay: core.serialization.property("fiscal_year_end_day", core.serialization.number().optional()),
    currency: core.serialization.lazy(async () => (await import("../../..")).accounting.CompanyInfoCurrency).optional(),
    remoteCreatedAt: core.serialization.property("remote_created_at", core.serialization.date().optional()),
    urls: core.serialization.list(core.serialization.string().optional()).optional(),
    addresses: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).accounting.Address))
        .optional(),
    phoneNumbers: core.serialization.property(
        "phone_numbers",
        core.serialization
            .list(
                core.serialization.lazyObject(async () => (await import("../../..")).accounting.AccountingPhoneNumber)
            )
            .optional()
    ),
    remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
    fieldMappings: core.serialization.property(
        "field_mappings",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    remoteData: core.serialization.property(
        "remote_data",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).accounting.RemoteData))
            .optional()
    ),
});

export declare namespace CompanyInfo {
    interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        name?: string | null;
        legal_name?: string | null;
        tax_number?: string | null;
        fiscal_year_end_month?: number | null;
        fiscal_year_end_day?: number | null;
        currency?: serializers.accounting.CompanyInfoCurrency.Raw | null;
        remote_created_at?: string | null;
        urls?: (string | null | undefined)[] | null;
        addresses?: serializers.accounting.Address.Raw[] | null;
        phone_numbers?: serializers.accounting.AccountingPhoneNumber.Raw[] | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: serializers.accounting.RemoteData.Raw[] | null;
    }
}
