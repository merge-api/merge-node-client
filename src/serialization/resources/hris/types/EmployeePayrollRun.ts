/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { EmployeePayrollRunEmployee } from "./EmployeePayrollRunEmployee";
import { EmployeePayrollRunPayrollRun } from "./EmployeePayrollRunPayrollRun";
import { Earning } from "./Earning";
import { Deduction } from "./Deduction";
import { Tax } from "./Tax";
import { RemoteData } from "./RemoteData";

export const EmployeePayrollRun: core.serialization.ObjectSchema<
    serializers.hris.EmployeePayrollRun.Raw,
    Merge.hris.EmployeePayrollRun
> = core.serialization.object({
    id: core.serialization.string().optional(),
    remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
    employee: EmployeePayrollRunEmployee.optional(),
    payrollRun: core.serialization.property("payroll_run", EmployeePayrollRunPayrollRun.optional()),
    grossPay: core.serialization.property("gross_pay", core.serialization.number().optional()),
    netPay: core.serialization.property("net_pay", core.serialization.number().optional()),
    startDate: core.serialization.property("start_date", core.serialization.date().optional()),
    endDate: core.serialization.property("end_date", core.serialization.date().optional()),
    checkDate: core.serialization.property("check_date", core.serialization.date().optional()),
    earnings: core.serialization.list(Earning).optional(),
    deductions: core.serialization.list(Deduction).optional(),
    taxes: core.serialization.list(Tax).optional(),
    remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
    fieldMappings: core.serialization.property(
        "field_mappings",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    ),
    remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
});

export declare namespace EmployeePayrollRun {
    export interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        employee?: EmployeePayrollRunEmployee.Raw | null;
        payroll_run?: EmployeePayrollRunPayrollRun.Raw | null;
        gross_pay?: number | null;
        net_pay?: number | null;
        start_date?: string | null;
        end_date?: string | null;
        check_date?: string | null;
        earnings?: Earning.Raw[] | null;
        deductions?: Deduction.Raw[] | null;
        taxes?: Tax.Raw[] | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
    }
}
