/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { EmploymentPayPeriod } from "./EmploymentPayPeriod";
import { EmploymentPayFrequency } from "./EmploymentPayFrequency";
import { EmploymentPayCurrency } from "./EmploymentPayCurrency";
import { EmploymentPayGroup } from "./EmploymentPayGroup";
import { EmploymentFlsaStatus } from "./EmploymentFlsaStatus";
import { EmploymentEmploymentType } from "./EmploymentEmploymentType";
import { RemoteData } from "./RemoteData";

export const Employment: core.serialization.ObjectSchema<serializers.hris.Employment.Raw, Merge.hris.Employment> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
        employee: core.serialization.lazy(() => serializers.hris.EmploymentEmployee).optional(),
        jobTitle: core.serialization.property("job_title", core.serialization.string().optional()),
        payRate: core.serialization.property("pay_rate", core.serialization.number().optional()),
        payPeriod: core.serialization.property("pay_period", EmploymentPayPeriod.optional()),
        payFrequency: core.serialization.property("pay_frequency", EmploymentPayFrequency.optional()),
        payCurrency: core.serialization.property("pay_currency", EmploymentPayCurrency.optional()),
        payGroup: core.serialization.property("pay_group", EmploymentPayGroup.optional()),
        flsaStatus: core.serialization.property("flsa_status", EmploymentFlsaStatus.optional()),
        effectiveDate: core.serialization.property("effective_date", core.serialization.date().optional()),
        employmentType: core.serialization.property("employment_type", EmploymentEmploymentType.optional()),
        remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
        fieldMappings: core.serialization.property(
            "field_mappings",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
        ),
        remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
    });

export declare namespace Employment {
    interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        employee?: serializers.hris.EmploymentEmployee.Raw | null;
        job_title?: string | null;
        pay_rate?: number | null;
        pay_period?: EmploymentPayPeriod.Raw | null;
        pay_frequency?: EmploymentPayFrequency.Raw | null;
        pay_currency?: EmploymentPayCurrency.Raw | null;
        pay_group?: EmploymentPayGroup.Raw | null;
        flsa_status?: EmploymentFlsaStatus.Raw | null;
        effective_date?: string | null;
        employment_type?: EmploymentEmploymentType.Raw | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
    }
}
