/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const Employment: core.serialization.ObjectSchema<serializers.hris.Employment.Raw, Merge.hris.Employment> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
        employee: core.serialization.lazy(async () => (await import("../../..")).hris.EmploymentEmployee).optional(),
        jobTitle: core.serialization.property("job_title", core.serialization.string().optional()),
        payRate: core.serialization.property("pay_rate", core.serialization.number().optional()),
        payPeriod: core.serialization.property(
            "pay_period",
            core.serialization.lazy(async () => (await import("../../..")).hris.EmploymentPayPeriod).optional()
        ),
        payFrequency: core.serialization.property(
            "pay_frequency",
            core.serialization.lazy(async () => (await import("../../..")).hris.EmploymentPayFrequency).optional()
        ),
        payCurrency: core.serialization.property(
            "pay_currency",
            core.serialization.lazy(async () => (await import("../../..")).hris.EmploymentPayCurrency).optional()
        ),
        payGroup: core.serialization.property(
            "pay_group",
            core.serialization.lazy(async () => (await import("../../..")).hris.EmploymentPayGroup).optional()
        ),
        flsaStatus: core.serialization.property(
            "flsa_status",
            core.serialization.lazy(async () => (await import("../../..")).hris.EmploymentFlsaStatus).optional()
        ),
        effectiveDate: core.serialization.property("effective_date", core.serialization.date().optional()),
        employmentType: core.serialization.property(
            "employment_type",
            core.serialization.lazy(async () => (await import("../../..")).hris.EmploymentEmploymentType).optional()
        ),
        remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
        fieldMappings: core.serialization.property(
            "field_mappings",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
        ),
        remoteData: core.serialization.property(
            "remote_data",
            core.serialization
                .list(core.serialization.lazyObject(async () => (await import("../../..")).hris.RemoteData))
                .optional()
        ),
    });

export declare namespace Employment {
    interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        employee?: serializers.hris.EmploymentEmployee.Raw | null;
        job_title?: string | null;
        pay_rate?: number | null;
        pay_period?: serializers.hris.EmploymentPayPeriod.Raw | null;
        pay_frequency?: serializers.hris.EmploymentPayFrequency.Raw | null;
        pay_currency?: serializers.hris.EmploymentPayCurrency.Raw | null;
        pay_group?: serializers.hris.EmploymentPayGroup.Raw | null;
        flsa_status?: serializers.hris.EmploymentFlsaStatus.Raw | null;
        effective_date?: string | null;
        employment_type?: serializers.hris.EmploymentEmploymentType.Raw | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: serializers.hris.RemoteData.Raw[] | null;
    }
}
