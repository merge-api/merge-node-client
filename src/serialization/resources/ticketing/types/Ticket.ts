/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { TicketAssigneesItem } from "./TicketAssigneesItem";
import { TicketAssignedTeamsItem } from "./TicketAssignedTeamsItem";
import { TicketCreator } from "./TicketCreator";
import { TicketStatus } from "./TicketStatus";
import { TicketCollectionsItem } from "./TicketCollectionsItem";
import { TicketAccount } from "./TicketAccount";
import { TicketContact } from "./TicketContact";
import { TicketPriority } from "./TicketPriority";
import { RemoteData } from "./RemoteData";
import { RemoteField } from "./RemoteField";

export const Ticket: core.serialization.ObjectSchema<serializers.ticketing.Ticket.Raw, Merge.ticketing.Ticket> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
        name: core.serialization.string().optional(),
        assignees: core.serialization.list(TicketAssigneesItem.optional()).optional(),
        assignedTeams: core.serialization.property(
            "assigned_teams",
            core.serialization.list(TicketAssignedTeamsItem.optional()).optional(),
        ),
        creator: TicketCreator.optional(),
        dueDate: core.serialization.property("due_date", core.serialization.date().optional()),
        status: TicketStatus.optional(),
        description: core.serialization.string().optional(),
        collections: core.serialization.list(TicketCollectionsItem.optional()).optional(),
        ticketType: core.serialization.property("ticket_type", core.serialization.string().optional()),
        account: TicketAccount.optional(),
        contact: TicketContact.optional(),
        parentTicket: core.serialization.property(
            "parent_ticket",
            core.serialization.lazy(() => serializers.ticketing.TicketParentTicket).optional(),
        ),
        attachments: core.serialization
            .list(core.serialization.lazy(() => serializers.ticketing.TicketAttachmentsItem).optional())
            .optional(),
        tags: core.serialization.list(core.serialization.string().optional()).optional(),
        roles: core.serialization.list(core.serialization.string().optional()).optional(),
        remoteCreatedAt: core.serialization.property("remote_created_at", core.serialization.date().optional()),
        remoteUpdatedAt: core.serialization.property("remote_updated_at", core.serialization.date().optional()),
        completedAt: core.serialization.property("completed_at", core.serialization.date().optional()),
        remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
        ticketUrl: core.serialization.property("ticket_url", core.serialization.string().optional()),
        priority: TicketPriority.optional(),
        fieldMappings: core.serialization.property(
            "field_mappings",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        ),
        remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
        remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteField).optional()),
    });

export declare namespace Ticket {
    export interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        name?: string | null;
        assignees?: (TicketAssigneesItem.Raw | null | undefined)[] | null;
        assigned_teams?: (TicketAssignedTeamsItem.Raw | null | undefined)[] | null;
        creator?: TicketCreator.Raw | null;
        due_date?: string | null;
        status?: TicketStatus.Raw | null;
        description?: string | null;
        collections?: (TicketCollectionsItem.Raw | null | undefined)[] | null;
        ticket_type?: string | null;
        account?: TicketAccount.Raw | null;
        contact?: TicketContact.Raw | null;
        parent_ticket?: serializers.ticketing.TicketParentTicket.Raw | null;
        attachments?: (serializers.ticketing.TicketAttachmentsItem.Raw | null | undefined)[] | null;
        tags?: (string | null | undefined)[] | null;
        roles?: (string | null | undefined)[] | null;
        remote_created_at?: string | null;
        remote_updated_at?: string | null;
        completed_at?: string | null;
        remote_was_deleted?: boolean | null;
        ticket_url?: string | null;
        priority?: TicketPriority.Raw | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
        remote_fields?: RemoteField.Raw[] | null;
    }
}
