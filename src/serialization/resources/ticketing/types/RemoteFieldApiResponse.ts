/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const RemoteFieldApiResponse: core.serialization.ObjectSchema<
    serializers.ticketing.RemoteFieldApiResponse.Raw,
    Merge.ticketing.RemoteFieldApiResponse
> = core.serialization.object({
    ticket: core.serialization.property(
        "Ticket",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    comment: core.serialization.property(
        "Comment",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    project: core.serialization.property(
        "Project",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    collection: core.serialization.property(
        "Collection",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    user: core.serialization.property(
        "User",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    role: core.serialization.property(
        "Role",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    account: core.serialization.property(
        "Account",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    team: core.serialization.property(
        "Team",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    attachment: core.serialization.property(
        "Attachment",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    tag: core.serialization.property(
        "Tag",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
    contact: core.serialization.property(
        "Contact",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ticketing.RemoteFieldApi))
            .optional()
    ),
});

export declare namespace RemoteFieldApiResponse {
    interface Raw {
        Ticket?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Comment?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Project?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Collection?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        User?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Role?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Account?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Team?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Attachment?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Tag?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
        Contact?: serializers.ticketing.RemoteFieldApi.Raw[] | null;
    }
}
