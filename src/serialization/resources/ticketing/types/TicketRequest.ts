/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { TicketRequestAssigneesItem } from "./TicketRequestAssigneesItem";
import { TicketRequestCreator } from "./TicketRequestCreator";
import { TicketRequestStatus } from "./TicketRequestStatus";
import { TicketRequestCollectionsItem } from "./TicketRequestCollectionsItem";
import { TicketRequestAccount } from "./TicketRequestAccount";
import { TicketRequestContact } from "./TicketRequestContact";
import { TicketRequestParentTicket } from "./TicketRequestParentTicket";
import { TicketRequestAttachmentsItem } from "./TicketRequestAttachmentsItem";
import { TicketRequestPriority } from "./TicketRequestPriority";
import { RemoteFieldRequest } from "./RemoteFieldRequest";

export const TicketRequest: core.serialization.ObjectSchema<
    serializers.ticketing.TicketRequest.Raw,
    Merge.ticketing.TicketRequest
> = core.serialization.object({
    name: core.serialization.string().optional(),
    assignees: core.serialization.list(TicketRequestAssigneesItem.optional()).optional(),
    creator: TicketRequestCreator.optional(),
    dueDate: core.serialization.property("due_date", core.serialization.date().optional()),
    status: TicketRequestStatus.optional(),
    description: core.serialization.string().optional(),
    collections: core.serialization.list(TicketRequestCollectionsItem.optional()).optional(),
    ticketType: core.serialization.property("ticket_type", core.serialization.string().optional()),
    account: TicketRequestAccount.optional(),
    contact: TicketRequestContact.optional(),
    parentTicket: core.serialization.property("parent_ticket", TicketRequestParentTicket.optional()),
    attachments: core.serialization.list(TicketRequestAttachmentsItem.optional()).optional(),
    tags: core.serialization.list(core.serialization.string().optional()).optional(),
    completedAt: core.serialization.property("completed_at", core.serialization.date().optional()),
    ticketUrl: core.serialization.property("ticket_url", core.serialization.string().optional()),
    priority: TicketRequestPriority.optional(),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteFieldRequest).optional()),
});

export declare namespace TicketRequest {
    interface Raw {
        name?: string | null;
        assignees?: (TicketRequestAssigneesItem.Raw | null | undefined)[] | null;
        creator?: TicketRequestCreator.Raw | null;
        due_date?: string | null;
        status?: TicketRequestStatus.Raw | null;
        description?: string | null;
        collections?: (TicketRequestCollectionsItem.Raw | null | undefined)[] | null;
        ticket_type?: string | null;
        account?: TicketRequestAccount.Raw | null;
        contact?: TicketRequestContact.Raw | null;
        parent_ticket?: TicketRequestParentTicket.Raw | null;
        attachments?: (TicketRequestAttachmentsItem.Raw | null | undefined)[] | null;
        tags?: (string | null | undefined)[] | null;
        completed_at?: string | null;
        ticket_url?: string | null;
        priority?: TicketRequestPriority.Raw | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
        remote_fields?: RemoteFieldRequest.Raw[] | null;
    }
}
