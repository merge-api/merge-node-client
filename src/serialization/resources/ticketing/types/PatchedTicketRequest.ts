/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { PatchedTicketRequestStatus } from "./PatchedTicketRequestStatus";
import { PatchedTicketRequestAccessLevel } from "./PatchedTicketRequestAccessLevel";
import { PatchedTicketRequestPriority } from "./PatchedTicketRequestPriority";
import { RemoteFieldRequest } from "./RemoteFieldRequest";

export const PatchedTicketRequest: core.serialization.ObjectSchema<
    serializers.ticketing.PatchedTicketRequest.Raw,
    Merge.ticketing.PatchedTicketRequest
> = core.serialization.object({
    name: core.serialization.string().optional(),
    assignees: core.serialization.list(core.serialization.string().optional()).optional(),
    assignedTeams: core.serialization.property(
        "assigned_teams",
        core.serialization.list(core.serialization.string().optional()).optional(),
    ),
    creator: core.serialization.string().optional(),
    dueDate: core.serialization.property("due_date", core.serialization.date().optional()),
    status: PatchedTicketRequestStatus.optional(),
    description: core.serialization.string().optional(),
    collections: core.serialization.list(core.serialization.string().optional()).optional(),
    ticketType: core.serialization.property("ticket_type", core.serialization.string().optional()),
    account: core.serialization.string().optional(),
    contact: core.serialization.string().optional(),
    parentTicket: core.serialization.property("parent_ticket", core.serialization.string().optional()),
    accessLevel: core.serialization.property("access_level", PatchedTicketRequestAccessLevel.optional()),
    tags: core.serialization.list(core.serialization.string().optional()).optional(),
    roles: core.serialization.list(core.serialization.string().optional()).optional(),
    completedAt: core.serialization.property("completed_at", core.serialization.date().optional()),
    ticketUrl: core.serialization.property("ticket_url", core.serialization.string().optional()),
    priority: PatchedTicketRequestPriority.optional(),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    ),
    remoteFields: core.serialization.property("remote_fields", core.serialization.list(RemoteFieldRequest).optional()),
});

export declare namespace PatchedTicketRequest {
    export interface Raw {
        name?: string | null;
        assignees?: (string | null | undefined)[] | null;
        assigned_teams?: (string | null | undefined)[] | null;
        creator?: string | null;
        due_date?: string | null;
        status?: PatchedTicketRequestStatus.Raw | null;
        description?: string | null;
        collections?: (string | null | undefined)[] | null;
        ticket_type?: string | null;
        account?: string | null;
        contact?: string | null;
        parent_ticket?: string | null;
        access_level?: PatchedTicketRequestAccessLevel.Raw | null;
        tags?: (string | null | undefined)[] | null;
        roles?: (string | null | undefined)[] | null;
        completed_at?: string | null;
        ticket_url?: string | null;
        priority?: PatchedTicketRequestPriority.Raw | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
        remote_fields?: RemoteFieldRequest.Raw[] | null;
    }
}
