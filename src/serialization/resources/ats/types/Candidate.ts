/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { PhoneNumber } from "./PhoneNumber";
import { EmailAddress } from "./EmailAddress";
import { Url } from "./Url";
import { CandidateAttachmentsItem } from "./CandidateAttachmentsItem";
import { RemoteData } from "./RemoteData";

export const Candidate: core.serialization.ObjectSchema<serializers.ats.Candidate.Raw, Merge.ats.Candidate> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
        firstName: core.serialization.property("first_name", core.serialization.string().optional()),
        lastName: core.serialization.property("last_name", core.serialization.string().optional()),
        company: core.serialization.string().optional(),
        title: core.serialization.string().optional(),
        remoteCreatedAt: core.serialization.property("remote_created_at", core.serialization.date().optional()),
        remoteUpdatedAt: core.serialization.property("remote_updated_at", core.serialization.date().optional()),
        lastInteractionAt: core.serialization.property("last_interaction_at", core.serialization.date().optional()),
        isPrivate: core.serialization.property("is_private", core.serialization.boolean().optional()),
        canEmail: core.serialization.property("can_email", core.serialization.boolean().optional()),
        locations: core.serialization.list(core.serialization.string().optional()).optional(),
        phoneNumbers: core.serialization.property("phone_numbers", core.serialization.list(PhoneNumber).optional()),
        emailAddresses: core.serialization.property(
            "email_addresses",
            core.serialization.list(EmailAddress).optional(),
        ),
        urls: core.serialization.list(Url).optional(),
        tags: core.serialization.list(core.serialization.string().optional()).optional(),
        applications: core.serialization
            .list(core.serialization.lazy(() => serializers.ats.CandidateApplicationsItem).optional())
            .optional(),
        attachments: core.serialization.list(CandidateAttachmentsItem.optional()).optional(),
        remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
        fieldMappings: core.serialization.property(
            "field_mappings",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        ),
        remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
    });

export declare namespace Candidate {
    export interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        first_name?: string | null;
        last_name?: string | null;
        company?: string | null;
        title?: string | null;
        remote_created_at?: string | null;
        remote_updated_at?: string | null;
        last_interaction_at?: string | null;
        is_private?: boolean | null;
        can_email?: boolean | null;
        locations?: (string | null | undefined)[] | null;
        phone_numbers?: PhoneNumber.Raw[] | null;
        email_addresses?: EmailAddress.Raw[] | null;
        urls?: Url.Raw[] | null;
        tags?: (string | null | undefined)[] | null;
        applications?: (serializers.ats.CandidateApplicationsItem.Raw | null | undefined)[] | null;
        attachments?: (CandidateAttachmentsItem.Raw | null | undefined)[] | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
    }
}
