/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const ApplicationRequest: core.serialization.ObjectSchema<
    serializers.ats.ApplicationRequest.Raw,
    Merge.ats.ApplicationRequest
> = core.serialization.object({
    candidate: core.serialization
        .lazy(async () => (await import("../../..")).ats.ApplicationRequestCandidate)
        .optional(),
    job: core.serialization.lazy(async () => (await import("../../..")).ats.ApplicationRequestJob).optional(),
    appliedAt: core.serialization.property("applied_at", core.serialization.date().optional()),
    rejectedAt: core.serialization.property("rejected_at", core.serialization.date().optional()),
    offers: core.serialization
        .list(
            core.serialization.lazy(async () => (await import("../../..")).ats.ApplicationRequestOffersItem).optional()
        )
        .optional(),
    source: core.serialization.string().optional(),
    creditedTo: core.serialization.property(
        "credited_to",
        core.serialization.lazy(async () => (await import("../../..")).ats.ApplicationRequestCreditedTo).optional()
    ),
    screeningQuestionAnswers: core.serialization.property(
        "screening_question_answers",
        core.serialization
            .list(
                core.serialization.lazy(
                    async () => (await import("../../..")).ats.ApplicationRequestScreeningQuestionAnswersItem
                )
            )
            .optional()
    ),
    currentStage: core.serialization.property(
        "current_stage",
        core.serialization.lazy(async () => (await import("../../..")).ats.ApplicationRequestCurrentStage).optional()
    ),
    rejectReason: core.serialization.property(
        "reject_reason",
        core.serialization.lazy(async () => (await import("../../..")).ats.ApplicationRequestRejectReason).optional()
    ),
    remoteTemplateId: core.serialization.property("remote_template_id", core.serialization.string().optional()),
    integrationParams: core.serialization.property(
        "integration_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    linkedAccountParams: core.serialization.property(
        "linked_account_params",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
});

export declare namespace ApplicationRequest {
    interface Raw {
        candidate?: serializers.ats.ApplicationRequestCandidate.Raw | null;
        job?: serializers.ats.ApplicationRequestJob.Raw | null;
        applied_at?: string | null;
        rejected_at?: string | null;
        offers?: (serializers.ats.ApplicationRequestOffersItem.Raw | null | undefined)[] | null;
        source?: string | null;
        credited_to?: serializers.ats.ApplicationRequestCreditedTo.Raw | null;
        screening_question_answers?: serializers.ats.ApplicationRequestScreeningQuestionAnswersItem.Raw[] | null;
        current_stage?: serializers.ats.ApplicationRequestCurrentStage.Raw | null;
        reject_reason?: serializers.ats.ApplicationRequestRejectReason.Raw | null;
        remote_template_id?: string | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
    }
}
