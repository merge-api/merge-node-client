/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Merge from "../../../../api/index";
import * as core from "../../../../core";
import { ApplicationJob } from "./ApplicationJob";
import { ApplicationCreditedTo } from "./ApplicationCreditedTo";
import { ApplicationScreeningQuestionAnswersItem } from "./ApplicationScreeningQuestionAnswersItem";
import { ApplicationCurrentStage } from "./ApplicationCurrentStage";
import { ApplicationRejectReason } from "./ApplicationRejectReason";
import { RemoteData } from "./RemoteData";

export const Application: core.serialization.ObjectSchema<serializers.ats.Application.Raw, Merge.ats.Application> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
        candidate: core.serialization.lazy(() => serializers.ats.ApplicationCandidate).optional(),
        job: ApplicationJob.optional(),
        appliedAt: core.serialization.property("applied_at", core.serialization.date().optional()),
        rejectedAt: core.serialization.property("rejected_at", core.serialization.date().optional()),
        offers: core.serialization
            .list(core.serialization.lazy(() => serializers.ats.ApplicationOffersItem).optional())
            .optional(),
        source: core.serialization.string().optional(),
        creditedTo: core.serialization.property("credited_to", ApplicationCreditedTo.optional()),
        screeningQuestionAnswers: core.serialization.property(
            "screening_question_answers",
            core.serialization.list(ApplicationScreeningQuestionAnswersItem).optional(),
        ),
        currentStage: core.serialization.property("current_stage", ApplicationCurrentStage.optional()),
        rejectReason: core.serialization.property("reject_reason", ApplicationRejectReason.optional()),
        remoteWasDeleted: core.serialization.property("remote_was_deleted", core.serialization.boolean().optional()),
        fieldMappings: core.serialization.property(
            "field_mappings",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        ),
        remoteData: core.serialization.property("remote_data", core.serialization.list(RemoteData).optional()),
    });

export declare namespace Application {
    export interface Raw {
        id?: string | null;
        remote_id?: string | null;
        created_at?: string | null;
        modified_at?: string | null;
        candidate?: serializers.ats.ApplicationCandidate.Raw | null;
        job?: ApplicationJob.Raw | null;
        applied_at?: string | null;
        rejected_at?: string | null;
        offers?: (serializers.ats.ApplicationOffersItem.Raw | null | undefined)[] | null;
        source?: string | null;
        credited_to?: ApplicationCreditedTo.Raw | null;
        screening_question_answers?: ApplicationScreeningQuestionAnswersItem.Raw[] | null;
        current_stage?: ApplicationCurrentStage.Raw | null;
        reject_reason?: ApplicationRejectReason.Raw | null;
        remote_was_deleted?: boolean | null;
        field_mappings?: Record<string, unknown> | null;
        remote_data?: RemoteData.Raw[] | null;
    }
}
