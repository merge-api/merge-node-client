/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Merge from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as errors from "../../../../../../errors/index";

export declare namespace Issues {
    export interface Options {
        environment?: core.Supplier<environments.MergeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        /** Override the X-Account-Token header */
        accountToken?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Account-Token header */
        accountToken?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Issues {
    protected readonly _options: Issues.Options;

    constructor(_options: Issues.Options) {
        this._options = _options;
    }

    /**
     * Gets all issues for Organization.
     *
     * @param {Merge.accounting.IssuesListRequest} request
     * @param {Issues.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accounting.issues.list({
     *         cursor: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw"
     *     })
     */
    public list(
        request: Merge.accounting.IssuesListRequest = {},
        requestOptions?: Issues.RequestOptions,
    ): core.HttpResponsePromise<Merge.accounting.PaginatedIssueList> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Merge.accounting.IssuesListRequest = {},
        requestOptions?: Issues.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.accounting.PaginatedIssueList>> {
        const {
            accountToken,
            cursor,
            endDate,
            endUserOrganizationName,
            firstIncidentTimeAfter,
            firstIncidentTimeBefore,
            includeMuted,
            integrationName,
            lastIncidentTimeAfter,
            lastIncidentTimeBefore,
            linkedAccountId,
            pageSize,
            startDate,
            status,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (accountToken != null) {
            _queryParams["account_token"] = accountToken;
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (endDate != null) {
            _queryParams["end_date"] = endDate;
        }

        if (endUserOrganizationName != null) {
            _queryParams["end_user_organization_name"] = endUserOrganizationName;
        }

        if (firstIncidentTimeAfter != null) {
            _queryParams["first_incident_time_after"] = firstIncidentTimeAfter.toISOString();
        }

        if (firstIncidentTimeBefore != null) {
            _queryParams["first_incident_time_before"] = firstIncidentTimeBefore.toISOString();
        }

        if (includeMuted != null) {
            _queryParams["include_muted"] = includeMuted;
        }

        if (integrationName != null) {
            _queryParams["integration_name"] = integrationName;
        }

        if (lastIncidentTimeAfter != null) {
            _queryParams["last_incident_time_after"] = lastIncidentTimeAfter.toISOString();
        }

        if (lastIncidentTimeBefore != null) {
            _queryParams["last_incident_time_before"] = lastIncidentTimeBefore.toISOString();
        }

        if (linkedAccountId != null) {
            _queryParams["linked_account_id"] = linkedAccountId;
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (startDate != null) {
            _queryParams["start_date"] = startDate;
        }

        if (status != null) {
            _queryParams["status"] = serializers.accounting.IssuesListRequestStatus.jsonOrThrow(status, {
                unrecognizedObjectKeys: "strip",
            });
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "accounting/v1/issues",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.accounting.PaginatedIssueList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /accounting/v1/issues.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get a specific issue.
     *
     * @param {string} id
     * @param {Issues.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accounting.issues.retrieve("id")
     */
    public retrieve(
        id: string,
        requestOptions?: Issues.RequestOptions,
    ): core.HttpResponsePromise<Merge.accounting.Issue> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(id, requestOptions));
    }

    private async __retrieve(
        id: string,
        requestOptions?: Issues.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.accounting.Issue>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `accounting/v1/issues/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.accounting.Issue.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /accounting/v1/issues/{id}.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
