/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Merge from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as errors from "../../../../../../errors/index";
import * as stream from "stream";

export declare namespace Files {
    export interface Options {
        environment?: core.Supplier<environments.MergeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        /** Override the X-Account-Token header */
        accountToken?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Account-Token header */
        accountToken?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Files {
    protected readonly _options: Files.Options;

    constructor(_options: Files.Options) {
        this._options = _options;
    }

    /**
     * Returns a list of `File` objects.
     *
     * @param {Merge.filestorage.FilesListRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.filestorage.files.list({
     *         cursor: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw"
     *     })
     */
    public list(
        request: Merge.filestorage.FilesListRequest = {},
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Merge.filestorage.PaginatedFileList> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Merge.filestorage.FilesListRequest = {},
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.filestorage.PaginatedFileList>> {
        const {
            createdAfter,
            createdBefore,
            cursor,
            driveId,
            expand,
            folderId,
            includeDeletedData,
            includeRemoteData,
            includeShellData,
            mimeType,
            modifiedAfter,
            modifiedBefore,
            name,
            orderBy,
            pageSize,
            remoteCreatedAfter,
            remoteCreatedBefore,
            remoteId,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (createdAfter != null) {
            _queryParams["created_after"] = createdAfter.toISOString();
        }

        if (createdBefore != null) {
            _queryParams["created_before"] = createdBefore.toISOString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (driveId != null) {
            _queryParams["drive_id"] = driveId;
        }

        if (expand != null) {
            _queryParams["expand"] = serializers.filestorage.FilesListRequestExpand.jsonOrThrow(expand, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (folderId != null) {
            _queryParams["folder_id"] = folderId;
        }

        if (includeDeletedData != null) {
            _queryParams["include_deleted_data"] = includeDeletedData.toString();
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (mimeType != null) {
            _queryParams["mime_type"] = mimeType;
        }

        if (modifiedAfter != null) {
            _queryParams["modified_after"] = modifiedAfter.toISOString();
        }

        if (modifiedBefore != null) {
            _queryParams["modified_before"] = modifiedBefore.toISOString();
        }

        if (name != null) {
            _queryParams["name"] = name;
        }

        if (orderBy != null) {
            _queryParams["order_by"] = serializers.filestorage.FilesListRequestOrderBy.jsonOrThrow(orderBy, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (remoteCreatedAfter != null) {
            _queryParams["remote_created_after"] = remoteCreatedAfter.toISOString();
        }

        if (remoteCreatedBefore != null) {
            _queryParams["remote_created_before"] = remoteCreatedBefore.toISOString();
        }

        if (remoteId != null) {
            _queryParams["remote_id"] = remoteId;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "filestorage/v1/files",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.filestorage.PaginatedFileList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /filestorage/v1/files.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a `File` object with the given values.
     *
     * @param {Merge.filestorage.FileStorageFileEndpointRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.filestorage.files.create({
     *         model: {}
     *     })
     */
    public create(
        request: Merge.filestorage.FileStorageFileEndpointRequest,
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Merge.filestorage.FileStorageFileResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Merge.filestorage.FileStorageFileEndpointRequest,
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.filestorage.FileStorageFileResponse>> {
        const { isDebugMode, runAsync, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (isDebugMode != null) {
            _queryParams["is_debug_mode"] = isDebugMode.toString();
        }

        if (runAsync != null) {
            _queryParams["run_async"] = runAsync.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "filestorage/v1/files",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.filestorage.FileStorageFileEndpointRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.filestorage.FileStorageFileResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling POST /filestorage/v1/files.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a `File` object with the given `id`.
     *
     * @param {string} id
     * @param {Merge.filestorage.FilesRetrieveRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.filestorage.files.retrieve("id")
     */
    public retrieve(
        id: string,
        request: Merge.filestorage.FilesRetrieveRequest = {},
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Merge.filestorage.File_> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(id, request, requestOptions));
    }

    private async __retrieve(
        id: string,
        request: Merge.filestorage.FilesRetrieveRequest = {},
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.filestorage.File_>> {
        const { expand, includeRemoteData, includeShellData } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            _queryParams["expand"] = serializers.filestorage.FilesRetrieveRequestExpand.jsonOrThrow(expand, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `filestorage/v1/files/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.filestorage.File_.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /filestorage/v1/files/{id}.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns the `File` content with the given `id` as a stream of bytes.
     */
    public downloadRetrieve(
        id: string,
        request: Merge.filestorage.FilesDownloadRetrieveRequest = {},
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<stream.Readable> {
        return core.HttpResponsePromise.fromPromise(this.__downloadRetrieve(id, request, requestOptions));
    }

    private async __downloadRetrieve(
        id: string,
        request: Merge.filestorage.FilesDownloadRetrieveRequest = {},
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<stream.Readable>> {
        const { includeShellData, mimeType } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (mimeType != null) {
            _queryParams["mime_type"] = mimeType;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)<stream.Readable>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `filestorage/v1/files/${encodeURIComponent(id)}/download`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /filestorage/v1/files/{id}/download.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns metadata to construct an authenticated file download request for a singular file, allowing you to download file directly from the third-party.
     *
     * @param {string} id
     * @param {Merge.filestorage.FilesDownloadRequestMetaRetrieveRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.filestorage.files.downloadRequestMetaRetrieve("id")
     */
    public downloadRequestMetaRetrieve(
        id: string,
        request: Merge.filestorage.FilesDownloadRequestMetaRetrieveRequest = {},
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Merge.filestorage.DownloadRequestMeta> {
        return core.HttpResponsePromise.fromPromise(this.__downloadRequestMetaRetrieve(id, request, requestOptions));
    }

    private async __downloadRequestMetaRetrieve(
        id: string,
        request: Merge.filestorage.FilesDownloadRequestMetaRetrieveRequest = {},
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.filestorage.DownloadRequestMeta>> {
        const { mimeType } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (mimeType != null) {
            _queryParams["mime_type"] = mimeType;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `filestorage/v1/files/${encodeURIComponent(id)}/download/request-meta`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.filestorage.DownloadRequestMeta.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /filestorage/v1/files/{id}/download/request-meta.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns metadata to construct authenticated file download requests, allowing you to download files directly from the third-party.
     *
     * @param {Merge.filestorage.FilesDownloadRequestMetaListRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.filestorage.files.downloadRequestMetaList({
     *         cursor: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw"
     *     })
     */
    public downloadRequestMetaList(
        request: Merge.filestorage.FilesDownloadRequestMetaListRequest = {},
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Merge.filestorage.PaginatedDownloadRequestMetaList> {
        return core.HttpResponsePromise.fromPromise(this.__downloadRequestMetaList(request, requestOptions));
    }

    private async __downloadRequestMetaList(
        request: Merge.filestorage.FilesDownloadRequestMetaListRequest = {},
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.filestorage.PaginatedDownloadRequestMetaList>> {
        const {
            createdAfter,
            createdBefore,
            cursor,
            ids,
            includeDeletedData,
            mimeTypes,
            modifiedAfter,
            modifiedBefore,
            orderBy,
            pageSize,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (createdAfter != null) {
            _queryParams["created_after"] = createdAfter;
        }

        if (createdBefore != null) {
            _queryParams["created_before"] = createdBefore;
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (ids != null) {
            if (Array.isArray(ids)) {
                _queryParams["ids"] = ids.map((item) => item);
            } else {
                _queryParams["ids"] = ids;
            }
        }

        if (includeDeletedData != null) {
            _queryParams["include_deleted_data"] = includeDeletedData.toString();
        }

        if (mimeTypes != null) {
            _queryParams["mime_types"] = mimeTypes;
        }

        if (modifiedAfter != null) {
            _queryParams["modified_after"] = modifiedAfter;
        }

        if (modifiedBefore != null) {
            _queryParams["modified_before"] = modifiedBefore;
        }

        if (orderBy != null) {
            _queryParams["order_by"] = serializers.filestorage.FilesDownloadRequestMetaListRequestOrderBy.jsonOrThrow(
                orderBy,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "filestorage/v1/files/download/request-meta",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.filestorage.PaginatedDownloadRequestMetaList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /filestorage/v1/files/download/request-meta.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns metadata for `FileStorageFile` POSTs.
     *
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.filestorage.files.metaPostRetrieve()
     */
    public metaPostRetrieve(
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Merge.filestorage.MetaResponse> {
        return core.HttpResponsePromise.fromPromise(this.__metaPostRetrieve(requestOptions));
    }

    private async __metaPostRetrieve(
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.filestorage.MetaResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "filestorage/v1/files/meta/post",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.filestorage.MetaResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /filestorage/v1/files/meta/post.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
