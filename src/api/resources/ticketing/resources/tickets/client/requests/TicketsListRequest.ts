/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Merge from "../../../../../..";

export interface TicketsListRequest {
    /**
     * If provided, will only return tickets for this account.
     */
    accountId?: string;
    /**
     * If provided, will only return tickets assigned to the assignee_ids; multiple assignee_ids can be separated by commas.
     */
    assigneeIds?: string;
    /**
     * If provided, will only return tickets assigned to the collection_ids; multiple collection_ids can be separated by commas.
     */
    collectionIds?: string;
    /**
     * If provided, will only return tickets completed after this datetime.
     */
    completedAfter?: Date;
    /**
     * If provided, will only return tickets completed before this datetime.
     */
    completedBefore?: Date;
    /**
     * If provided, will only return tickets for this contact.
     */
    contactId?: string;
    /**
     * If provided, will only return objects created after this datetime.
     */
    createdAfter?: Date;
    /**
     * If provided, will only return objects created before this datetime.
     */
    createdBefore?: Date;
    /**
     * The pagination cursor value.
     */
    cursor?: string;
    /**
     * If provided, will only return tickets due after this datetime.
     */
    dueAfter?: Date;
    /**
     * If provided, will only return tickets due before this datetime.
     */
    dueBefore?: Date;
    /**
     * Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
     */
    expand?: Merge.ticketing.TicketsListRequestExpand;
    /**
     * Whether to include data that was marked as deleted by third party webhooks.
     */
    includeDeletedData?: boolean;
    /**
     * Whether to include the original data Merge fetched from the third-party to produce these models.
     */
    includeRemoteData?: boolean;
    /**
     * Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
     */
    includeRemoteFields?: boolean;
    /**
     * If provided, only objects synced by Merge after this date time will be returned.
     */
    modifiedAfter?: Date;
    /**
     * If provided, only objects synced by Merge before this date time will be returned.
     */
    modifiedBefore?: Date;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    /**
     * If provided, will only return sub tickets of the parent_ticket_id.
     */
    parentTicketId?: string;
    /**
     * If provided, will only return tickets of this priority.
     *
     * * `URGENT` - URGENT
     * * `HIGH` - HIGH
     * * `NORMAL` - NORMAL
     * * `LOW` - LOW
     */
    priority?: Merge.ticketing.TicketsListRequestPriority;
    /**
     * If provided, will only return tickets for this project.
     */
    projectId?: string;
    /**
     * If provided, will only return tickets created in the third party platform after this datetime.
     */
    remoteCreatedAfter?: Date;
    /**
     * If provided, will only return tickets created in the third party platform before this datetime.
     */
    remoteCreatedBefore?: Date;
    /**
     * Deprecated. Use show_enum_origins.
     */
    remoteFields?: Merge.ticketing.TicketsListRequestRemoteFields;
    /**
     * The API provider's ID for the given object.
     */
    remoteId?: string;
    /**
     * If provided, will only return tickets updated in the third party platform after this datetime.
     */
    remoteUpdatedAfter?: Date;
    /**
     * If provided, will only return tickets updated in the third party platform before this datetime.
     */
    remoteUpdatedBefore?: Date;
    /**
     * Which fields should be returned in non-normalized form.
     */
    showEnumOrigins?: Merge.ticketing.TicketsListRequestShowEnumOrigins;
    /**
     * If provided, will only return tickets of this status.
     *
     * * `OPEN` - OPEN
     * * `CLOSED` - CLOSED
     * * `IN_PROGRESS` - IN_PROGRESS
     * * `ON_HOLD` - ON_HOLD
     */
    status?: Merge.ticketing.TicketsListRequestStatus;
    /**
     * If provided, will only return tickets matching the tags; multiple tags can be separated by commas.
     */
    tags?: string;
    /**
     * If provided, will only return tickets of this type.
     */
    ticketType?: string;
}
