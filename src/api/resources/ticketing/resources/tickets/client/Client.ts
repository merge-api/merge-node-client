/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Merge from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as errors from "../../../../../../errors/index";

export declare namespace Tickets {
    export interface Options {
        environment?: core.Supplier<environments.MergeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        /** Override the X-Account-Token header */
        accountToken?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Account-Token header */
        accountToken?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Tickets {
    protected readonly _options: Tickets.Options;

    constructor(_options: Tickets.Options) {
        this._options = _options;
    }

    /**
     * Returns a list of `Ticket` objects.
     *
     * @param {Merge.ticketing.TicketsListRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.ticketing.tickets.list()
     */
    public list(
        request: Merge.ticketing.TicketsListRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): core.HttpResponsePromise<Merge.ticketing.PaginatedTicketList> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Merge.ticketing.TicketsListRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.ticketing.PaginatedTicketList>> {
        const {
            accountId,
            assigneeIds,
            collectionIds,
            completedAfter,
            completedBefore,
            contactId,
            createdAfter,
            createdBefore,
            cursor,
            dueAfter,
            dueBefore,
            expand,
            includeDeletedData,
            includeRemoteData,
            includeRemoteFields,
            includeShellData,
            modifiedAfter,
            modifiedBefore,
            pageSize,
            parentTicketId,
            priority,
            remoteCreatedAfter,
            remoteCreatedBefore,
            remoteFields,
            remoteId,
            remoteUpdatedAfter,
            remoteUpdatedBefore,
            showEnumOrigins,
            status,
            tags,
            ticketType,
            ticketUrl,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (accountId != null) {
            _queryParams["account_id"] = accountId;
        }

        if (assigneeIds != null) {
            _queryParams["assignee_ids"] = assigneeIds;
        }

        if (collectionIds != null) {
            _queryParams["collection_ids"] = collectionIds;
        }

        if (completedAfter != null) {
            _queryParams["completed_after"] = completedAfter.toISOString();
        }

        if (completedBefore != null) {
            _queryParams["completed_before"] = completedBefore.toISOString();
        }

        if (contactId != null) {
            _queryParams["contact_id"] = contactId;
        }

        if (createdAfter != null) {
            _queryParams["created_after"] = createdAfter.toISOString();
        }

        if (createdBefore != null) {
            _queryParams["created_before"] = createdBefore.toISOString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (dueAfter != null) {
            _queryParams["due_after"] = dueAfter.toISOString();
        }

        if (dueBefore != null) {
            _queryParams["due_before"] = dueBefore.toISOString();
        }

        if (expand != null) {
            _queryParams["expand"] = serializers.ticketing.TicketsListRequestExpand.jsonOrThrow(expand, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (includeDeletedData != null) {
            _queryParams["include_deleted_data"] = includeDeletedData.toString();
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeRemoteFields != null) {
            _queryParams["include_remote_fields"] = includeRemoteFields.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (modifiedAfter != null) {
            _queryParams["modified_after"] = modifiedAfter.toISOString();
        }

        if (modifiedBefore != null) {
            _queryParams["modified_before"] = modifiedBefore.toISOString();
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (parentTicketId != null) {
            _queryParams["parent_ticket_id"] = parentTicketId;
        }

        if (priority != null) {
            _queryParams["priority"] = serializers.ticketing.TicketsListRequestPriority.jsonOrThrow(priority, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (remoteCreatedAfter != null) {
            _queryParams["remote_created_after"] = remoteCreatedAfter.toISOString();
        }

        if (remoteCreatedBefore != null) {
            _queryParams["remote_created_before"] = remoteCreatedBefore.toISOString();
        }

        if (remoteFields != null) {
            _queryParams["remote_fields"] = serializers.ticketing.TicketsListRequestRemoteFields.jsonOrThrow(
                remoteFields,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (remoteId != null) {
            _queryParams["remote_id"] = remoteId;
        }

        if (remoteUpdatedAfter != null) {
            _queryParams["remote_updated_after"] = remoteUpdatedAfter.toISOString();
        }

        if (remoteUpdatedBefore != null) {
            _queryParams["remote_updated_before"] = remoteUpdatedBefore.toISOString();
        }

        if (showEnumOrigins != null) {
            _queryParams["show_enum_origins"] = serializers.ticketing.TicketsListRequestShowEnumOrigins.jsonOrThrow(
                showEnumOrigins,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        if (tags != null) {
            _queryParams["tags"] = tags;
        }

        if (ticketType != null) {
            _queryParams["ticket_type"] = ticketType;
        }

        if (ticketUrl != null) {
            _queryParams["ticket_url"] = ticketUrl;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "ticketing/v1/tickets",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ticketing.PaginatedTicketList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /ticketing/v1/tickets.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a `Ticket` object with the given values.
     *
     * @param {Merge.ticketing.TicketEndpointRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.ticketing.tickets.create({
     *         model: {}
     *     })
     */
    public create(
        request: Merge.ticketing.TicketEndpointRequest,
        requestOptions?: Tickets.RequestOptions,
    ): core.HttpResponsePromise<Merge.ticketing.TicketResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Merge.ticketing.TicketEndpointRequest,
        requestOptions?: Tickets.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.ticketing.TicketResponse>> {
        const { isDebugMode, runAsync, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (isDebugMode != null) {
            _queryParams["is_debug_mode"] = isDebugMode.toString();
        }

        if (runAsync != null) {
            _queryParams["run_async"] = runAsync.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "ticketing/v1/tickets",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.ticketing.TicketEndpointRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ticketing.TicketResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling POST /ticketing/v1/tickets.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a `Ticket` object with the given `id`.
     *
     * @param {string} id
     * @param {Merge.ticketing.TicketsRetrieveRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.ticketing.tickets.retrieve("id")
     */
    public retrieve(
        id: string,
        request: Merge.ticketing.TicketsRetrieveRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): core.HttpResponsePromise<Merge.ticketing.Ticket> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(id, request, requestOptions));
    }

    private async __retrieve(
        id: string,
        request: Merge.ticketing.TicketsRetrieveRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.ticketing.Ticket>> {
        const { expand, includeRemoteData, includeRemoteFields, includeShellData, remoteFields, showEnumOrigins } =
            request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            _queryParams["expand"] = serializers.ticketing.TicketsRetrieveRequestExpand.jsonOrThrow(expand, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeRemoteFields != null) {
            _queryParams["include_remote_fields"] = includeRemoteFields.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (remoteFields != null) {
            _queryParams["remote_fields"] = serializers.ticketing.TicketsRetrieveRequestRemoteFields.jsonOrThrow(
                remoteFields,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (showEnumOrigins != null) {
            _queryParams["show_enum_origins"] = serializers.ticketing.TicketsRetrieveRequestShowEnumOrigins.jsonOrThrow(
                showEnumOrigins,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `ticketing/v1/tickets/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ticketing.Ticket.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /ticketing/v1/tickets/{id}.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a `Ticket` object with the given `id`.
     *
     * @param {string} id
     * @param {Merge.ticketing.PatchedTicketEndpointRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.ticketing.tickets.partialUpdate("id", {
     *         model: {}
     *     })
     */
    public partialUpdate(
        id: string,
        request: Merge.ticketing.PatchedTicketEndpointRequest,
        requestOptions?: Tickets.RequestOptions,
    ): core.HttpResponsePromise<Merge.ticketing.TicketResponse> {
        return core.HttpResponsePromise.fromPromise(this.__partialUpdate(id, request, requestOptions));
    }

    private async __partialUpdate(
        id: string,
        request: Merge.ticketing.PatchedTicketEndpointRequest,
        requestOptions?: Tickets.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.ticketing.TicketResponse>> {
        const { isDebugMode, runAsync, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (isDebugMode != null) {
            _queryParams["is_debug_mode"] = isDebugMode.toString();
        }

        if (runAsync != null) {
            _queryParams["run_async"] = runAsync.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `ticketing/v1/tickets/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.ticketing.PatchedTicketEndpointRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ticketing.TicketResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling PATCH /ticketing/v1/tickets/{id}.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a list of `Viewer` objects that point to a User id or Team id that is either an assignee or viewer on a `Ticket` with the given id. [Learn more.](https://help.merge.dev/en/articles/10333658-ticketing-access-control-list-acls)
     *
     * @param {string} ticketId
     * @param {Merge.ticketing.TicketsViewersListRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.ticketing.tickets.viewersList("ticket_id")
     */
    public viewersList(
        ticketId: string,
        request: Merge.ticketing.TicketsViewersListRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): core.HttpResponsePromise<Merge.ticketing.PaginatedViewerList> {
        return core.HttpResponsePromise.fromPromise(this.__viewersList(ticketId, request, requestOptions));
    }

    private async __viewersList(
        ticketId: string,
        request: Merge.ticketing.TicketsViewersListRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.ticketing.PaginatedViewerList>> {
        const { cursor, expand, includeDeletedData, includeRemoteData, includeShellData, pageSize } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (expand != null) {
            _queryParams["expand"] = serializers.ticketing.TicketsViewersListRequestExpand.jsonOrThrow(expand, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (includeDeletedData != null) {
            _queryParams["include_deleted_data"] = includeDeletedData.toString();
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `ticketing/v1/tickets/${encodeURIComponent(ticketId)}/viewers`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ticketing.PaginatedViewerList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /ticketing/v1/tickets/{ticket_id}/viewers.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns metadata for `Ticket` PATCHs.
     *
     * @param {string} id
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.ticketing.tickets.metaPatchRetrieve("id")
     */
    public metaPatchRetrieve(
        id: string,
        requestOptions?: Tickets.RequestOptions,
    ): core.HttpResponsePromise<Merge.ticketing.MetaResponse> {
        return core.HttpResponsePromise.fromPromise(this.__metaPatchRetrieve(id, requestOptions));
    }

    private async __metaPatchRetrieve(
        id: string,
        requestOptions?: Tickets.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.ticketing.MetaResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `ticketing/v1/tickets/meta/patch/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ticketing.MetaResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /ticketing/v1/tickets/meta/patch/{id}.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns metadata for `Ticket` POSTs.
     *
     * @param {Merge.ticketing.TicketsMetaPostRetrieveRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.ticketing.tickets.metaPostRetrieve()
     */
    public metaPostRetrieve(
        request: Merge.ticketing.TicketsMetaPostRetrieveRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): core.HttpResponsePromise<Merge.ticketing.MetaResponse> {
        return core.HttpResponsePromise.fromPromise(this.__metaPostRetrieve(request, requestOptions));
    }

    private async __metaPostRetrieve(
        request: Merge.ticketing.TicketsMetaPostRetrieveRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.ticketing.MetaResponse>> {
        const { collectionId, ticketType } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (collectionId != null) {
            _queryParams["collection_id"] = collectionId;
        }

        if (ticketType != null) {
            _queryParams["ticket_type"] = ticketType;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "ticketing/v1/tickets/meta/post",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ticketing.MetaResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /ticketing/v1/tickets/meta/post.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a list of `RemoteFieldClass` objects.
     *
     * @param {Merge.ticketing.TicketsRemoteFieldClassesListRequest} request
     * @param {Tickets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.ticketing.tickets.remoteFieldClassesList()
     */
    public remoteFieldClassesList(
        request: Merge.ticketing.TicketsRemoteFieldClassesListRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): core.HttpResponsePromise<Merge.ticketing.PaginatedRemoteFieldClassList> {
        return core.HttpResponsePromise.fromPromise(this.__remoteFieldClassesList(request, requestOptions));
    }

    private async __remoteFieldClassesList(
        request: Merge.ticketing.TicketsRemoteFieldClassesListRequest = {},
        requestOptions?: Tickets.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.ticketing.PaginatedRemoteFieldClassList>> {
        const {
            cursor,
            ids,
            includeDeletedData,
            includeRemoteData,
            includeShellData,
            isCommonModelField,
            isCustom,
            pageSize,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (ids != null) {
            _queryParams["ids"] = ids;
        }

        if (includeDeletedData != null) {
            _queryParams["include_deleted_data"] = includeDeletedData.toString();
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (isCommonModelField != null) {
            _queryParams["is_common_model_field"] = isCommonModelField.toString();
        }

        if (isCustom != null) {
            _queryParams["is_custom"] = isCustom.toString();
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "ticketing/v1/tickets/remote-field-classes",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ticketing.PaginatedRemoteFieldClassList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /ticketing/v1/tickets/remote-field-classes.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
