/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Merge from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";

export declare namespace Employees {
    export interface Options {
        environment?: core.Supplier<environments.MergeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        /** Override the X-Account-Token header */
        accountToken?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Account-Token header */
        accountToken?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Employees {
    constructor(protected readonly _options: Employees.Options) {}

    /**
     * Returns a list of `Employee` objects.
     *
     * @param {Merge.hris.EmployeesListRequest} request
     * @param {Employees.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hris.employees.list()
     */
    public list(
        request: Merge.hris.EmployeesListRequest = {},
        requestOptions?: Employees.RequestOptions,
    ): core.HttpResponsePromise<Merge.hris.PaginatedEmployeeList> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Merge.hris.EmployeesListRequest = {},
        requestOptions?: Employees.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.hris.PaginatedEmployeeList>> {
        const {
            companyId,
            createdAfter,
            createdBefore,
            cursor,
            displayFullName,
            employmentStatus,
            employmentType,
            expand,
            firstName,
            groups,
            homeLocationId,
            includeDeletedData,
            includeRemoteData,
            includeSensitiveFields,
            includeShellData,
            jobTitle,
            lastName,
            managerId,
            modifiedAfter,
            modifiedBefore,
            pageSize,
            payGroupId,
            personalEmail,
            remoteFields,
            remoteId,
            showEnumOrigins,
            startedAfter,
            startedBefore,
            teamId,
            terminatedAfter,
            terminatedBefore,
            workEmail,
            workLocationId,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (companyId != null) {
            _queryParams["company_id"] = companyId;
        }

        if (createdAfter != null) {
            _queryParams["created_after"] = createdAfter.toISOString();
        }

        if (createdBefore != null) {
            _queryParams["created_before"] = createdBefore.toISOString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (displayFullName != null) {
            _queryParams["display_full_name"] = displayFullName;
        }

        if (employmentStatus != null) {
            _queryParams["employment_status"] = serializers.hris.EmployeesListRequestEmploymentStatus.jsonOrThrow(
                employmentStatus,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (employmentType != null) {
            _queryParams["employment_type"] = employmentType;
        }

        if (expand != null) {
            _queryParams["expand"] = serializers.hris.EmployeesListRequestExpand.jsonOrThrow(expand, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (firstName != null) {
            _queryParams["first_name"] = firstName;
        }

        if (groups != null) {
            _queryParams["groups"] = groups;
        }

        if (homeLocationId != null) {
            _queryParams["home_location_id"] = homeLocationId;
        }

        if (includeDeletedData != null) {
            _queryParams["include_deleted_data"] = includeDeletedData.toString();
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeSensitiveFields != null) {
            _queryParams["include_sensitive_fields"] = includeSensitiveFields.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (jobTitle != null) {
            _queryParams["job_title"] = jobTitle;
        }

        if (lastName != null) {
            _queryParams["last_name"] = lastName;
        }

        if (managerId != null) {
            _queryParams["manager_id"] = managerId;
        }

        if (modifiedAfter != null) {
            _queryParams["modified_after"] = modifiedAfter.toISOString();
        }

        if (modifiedBefore != null) {
            _queryParams["modified_before"] = modifiedBefore.toISOString();
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (payGroupId != null) {
            _queryParams["pay_group_id"] = payGroupId;
        }

        if (personalEmail != null) {
            _queryParams["personal_email"] = personalEmail;
        }

        if (remoteFields != null) {
            _queryParams["remote_fields"] = serializers.hris.EmployeesListRequestRemoteFields.jsonOrThrow(
                remoteFields,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (remoteId != null) {
            _queryParams["remote_id"] = remoteId;
        }

        if (showEnumOrigins != null) {
            _queryParams["show_enum_origins"] = serializers.hris.EmployeesListRequestShowEnumOrigins.jsonOrThrow(
                showEnumOrigins,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (startedAfter != null) {
            _queryParams["started_after"] = startedAfter.toISOString();
        }

        if (startedBefore != null) {
            _queryParams["started_before"] = startedBefore.toISOString();
        }

        if (teamId != null) {
            _queryParams["team_id"] = teamId;
        }

        if (terminatedAfter != null) {
            _queryParams["terminated_after"] = terminatedAfter.toISOString();
        }

        if (terminatedBefore != null) {
            _queryParams["terminated_before"] = terminatedBefore.toISOString();
        }

        if (workEmail != null) {
            _queryParams["work_email"] = workEmail;
        }

        if (workLocationId != null) {
            _queryParams["work_location_id"] = workLocationId;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "hris/v1/employees",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token":
                    (await core.Supplier.get(this._options.accountToken)) != null
                        ? await core.Supplier.get(this._options.accountToken)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mergeapi/merge-node-client",
                "X-Fern-SDK-Version": "1.1.9",
                "User-Agent": "@mergeapi/merge-node-client/1.1.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.hris.PaginatedEmployeeList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /hris/v1/employees.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates an `Employee` object with the given values.
     *
     * @param {Merge.hris.EmployeeEndpointRequest} request
     * @param {Employees.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hris.employees.create({
     *         model: {}
     *     })
     */
    public create(
        request: Merge.hris.EmployeeEndpointRequest,
        requestOptions?: Employees.RequestOptions,
    ): core.HttpResponsePromise<Merge.hris.EmployeeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Merge.hris.EmployeeEndpointRequest,
        requestOptions?: Employees.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.hris.EmployeeResponse>> {
        const { isDebugMode, runAsync, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (isDebugMode != null) {
            _queryParams["is_debug_mode"] = isDebugMode.toString();
        }

        if (runAsync != null) {
            _queryParams["run_async"] = runAsync.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "hris/v1/employees",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token":
                    (await core.Supplier.get(this._options.accountToken)) != null
                        ? await core.Supplier.get(this._options.accountToken)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mergeapi/merge-node-client",
                "X-Fern-SDK-Version": "1.1.9",
                "User-Agent": "@mergeapi/merge-node-client/1.1.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.hris.EmployeeEndpointRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.hris.EmployeeResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling POST /hris/v1/employees.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns an `Employee` object with the given `id`.
     *
     * @param {string} id
     * @param {Merge.hris.EmployeesRetrieveRequest} request
     * @param {Employees.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hris.employees.retrieve("id")
     */
    public retrieve(
        id: string,
        request: Merge.hris.EmployeesRetrieveRequest = {},
        requestOptions?: Employees.RequestOptions,
    ): core.HttpResponsePromise<Merge.hris.Employee> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(id, request, requestOptions));
    }

    private async __retrieve(
        id: string,
        request: Merge.hris.EmployeesRetrieveRequest = {},
        requestOptions?: Employees.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.hris.Employee>> {
        const { expand, includeRemoteData, includeSensitiveFields, includeShellData, remoteFields, showEnumOrigins } =
            request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            _queryParams["expand"] = serializers.hris.EmployeesRetrieveRequestExpand.jsonOrThrow(expand, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeSensitiveFields != null) {
            _queryParams["include_sensitive_fields"] = includeSensitiveFields.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (remoteFields != null) {
            _queryParams["remote_fields"] = serializers.hris.EmployeesRetrieveRequestRemoteFields.jsonOrThrow(
                remoteFields,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (showEnumOrigins != null) {
            _queryParams["show_enum_origins"] = serializers.hris.EmployeesRetrieveRequestShowEnumOrigins.jsonOrThrow(
                showEnumOrigins,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `hris/v1/employees/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token":
                    (await core.Supplier.get(this._options.accountToken)) != null
                        ? await core.Supplier.get(this._options.accountToken)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mergeapi/merge-node-client",
                "X-Fern-SDK-Version": "1.1.9",
                "User-Agent": "@mergeapi/merge-node-client/1.1.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.hris.Employee.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /hris/v1/employees/{id}.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The "reason" and "message" fields in the request body will be stored for audit purposes.
     *
     * @param {string} modelId
     * @param {Merge.hris.IgnoreCommonModelRequest} request
     * @param {Employees.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hris.employees.ignoreCreate("model_id", {
     *         reason: "GENERAL_CUSTOMER_REQUEST"
     *     })
     */
    public ignoreCreate(
        modelId: string,
        request: Merge.hris.IgnoreCommonModelRequest,
        requestOptions?: Employees.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__ignoreCreate(modelId, request, requestOptions));
    }

    private async __ignoreCreate(
        modelId: string,
        request: Merge.hris.IgnoreCommonModelRequest,
        requestOptions?: Employees.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `hris/v1/employees/ignore/${encodeURIComponent(modelId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token":
                    (await core.Supplier.get(this._options.accountToken)) != null
                        ? await core.Supplier.get(this._options.accountToken)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mergeapi/merge-node-client",
                "X-Fern-SDK-Version": "1.1.9",
                "User-Agent": "@mergeapi/merge-node-client/1.1.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.hris.IgnoreCommonModelRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling POST /hris/v1/employees/ignore/{model_id}.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns metadata for `Employee` POSTs.
     *
     * @param {Employees.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hris.employees.metaPostRetrieve()
     */
    public metaPostRetrieve(
        requestOptions?: Employees.RequestOptions,
    ): core.HttpResponsePromise<Merge.hris.MetaResponse> {
        return core.HttpResponsePromise.fromPromise(this.__metaPostRetrieve(requestOptions));
    }

    private async __metaPostRetrieve(
        requestOptions?: Employees.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.hris.MetaResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "hris/v1/employees/meta/post",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token":
                    (await core.Supplier.get(this._options.accountToken)) != null
                        ? await core.Supplier.get(this._options.accountToken)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mergeapi/merge-node-client",
                "X-Fern-SDK-Version": "1.1.9",
                "User-Agent": "@mergeapi/merge-node-client/1.1.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.hris.MetaResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /hris/v1/employees/meta/post.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
