/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Merge from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";

export declare namespace PayrollRuns {
    export interface Options {
        environment?: core.Supplier<environments.MergeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        /** Override the X-Account-Token header */
        accountToken?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Account-Token header */
        accountToken?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class PayrollRuns {
    constructor(protected readonly _options: PayrollRuns.Options) {}

    /**
     * Returns a list of `PayrollRun` objects.
     *
     * @param {Merge.hris.PayrollRunsListRequest} request
     * @param {PayrollRuns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hris.payrollRuns.list()
     */
    public list(
        request: Merge.hris.PayrollRunsListRequest = {},
        requestOptions?: PayrollRuns.RequestOptions,
    ): core.HttpResponsePromise<Merge.hris.PaginatedPayrollRunList> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Merge.hris.PayrollRunsListRequest = {},
        requestOptions?: PayrollRuns.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.hris.PaginatedPayrollRunList>> {
        const {
            createdAfter,
            createdBefore,
            cursor,
            endedAfter,
            endedBefore,
            includeDeletedData,
            includeRemoteData,
            includeShellData,
            modifiedAfter,
            modifiedBefore,
            pageSize,
            remoteFields,
            remoteId,
            runType,
            showEnumOrigins,
            startedAfter,
            startedBefore,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (createdAfter != null) {
            _queryParams["created_after"] = createdAfter.toISOString();
        }

        if (createdBefore != null) {
            _queryParams["created_before"] = createdBefore.toISOString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (endedAfter != null) {
            _queryParams["ended_after"] = endedAfter.toISOString();
        }

        if (endedBefore != null) {
            _queryParams["ended_before"] = endedBefore.toISOString();
        }

        if (includeDeletedData != null) {
            _queryParams["include_deleted_data"] = includeDeletedData.toString();
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (modifiedAfter != null) {
            _queryParams["modified_after"] = modifiedAfter.toISOString();
        }

        if (modifiedBefore != null) {
            _queryParams["modified_before"] = modifiedBefore.toISOString();
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (remoteFields != null) {
            _queryParams["remote_fields"] = serializers.hris.PayrollRunsListRequestRemoteFields.jsonOrThrow(
                remoteFields,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (remoteId != null) {
            _queryParams["remote_id"] = remoteId;
        }

        if (runType != null) {
            _queryParams["run_type"] = serializers.hris.PayrollRunsListRequestRunType.jsonOrThrow(runType, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (showEnumOrigins != null) {
            _queryParams["show_enum_origins"] = serializers.hris.PayrollRunsListRequestShowEnumOrigins.jsonOrThrow(
                showEnumOrigins,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (startedAfter != null) {
            _queryParams["started_after"] = startedAfter.toISOString();
        }

        if (startedBefore != null) {
            _queryParams["started_before"] = startedBefore.toISOString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "hris/v1/payroll-runs",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token":
                    (await core.Supplier.get(this._options.accountToken)) != null
                        ? await core.Supplier.get(this._options.accountToken)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mergeapi/merge-node-client",
                "X-Fern-SDK-Version": "1.1.8",
                "User-Agent": "@mergeapi/merge-node-client/1.1.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.hris.PaginatedPayrollRunList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /hris/v1/payroll-runs.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a `PayrollRun` object with the given `id`.
     *
     * @param {string} id
     * @param {Merge.hris.PayrollRunsRetrieveRequest} request
     * @param {PayrollRuns.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hris.payrollRuns.retrieve("id")
     */
    public retrieve(
        id: string,
        request: Merge.hris.PayrollRunsRetrieveRequest = {},
        requestOptions?: PayrollRuns.RequestOptions,
    ): core.HttpResponsePromise<Merge.hris.PayrollRun> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(id, request, requestOptions));
    }

    private async __retrieve(
        id: string,
        request: Merge.hris.PayrollRunsRetrieveRequest = {},
        requestOptions?: PayrollRuns.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.hris.PayrollRun>> {
        const { includeRemoteData, includeShellData, remoteFields, showEnumOrigins } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (remoteFields != null) {
            _queryParams["remote_fields"] = serializers.hris.PayrollRunsRetrieveRequestRemoteFields.jsonOrThrow(
                remoteFields,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (showEnumOrigins != null) {
            _queryParams["show_enum_origins"] = serializers.hris.PayrollRunsRetrieveRequestShowEnumOrigins.jsonOrThrow(
                showEnumOrigins,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `hris/v1/payroll-runs/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token":
                    (await core.Supplier.get(this._options.accountToken)) != null
                        ? await core.Supplier.get(this._options.accountToken)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mergeapi/merge-node-client",
                "X-Fern-SDK-Version": "1.1.8",
                "User-Agent": "@mergeapi/merge-node-client/1.1.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.hris.PayrollRun.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /hris/v1/payroll-runs/{id}.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
