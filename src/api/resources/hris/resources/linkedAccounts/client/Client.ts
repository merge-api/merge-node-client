/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Merge from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as errors from "../../../../../../errors/index";

export declare namespace LinkedAccounts {
    export interface Options {
        environment?: core.Supplier<environments.MergeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        /** Override the X-Account-Token header */
        accountToken?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Account-Token header */
        accountToken?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class LinkedAccounts {
    protected readonly _options: LinkedAccounts.Options;

    constructor(_options: LinkedAccounts.Options) {
        this._options = _options;
    }

    /**
     * List linked accounts for your organization.
     *
     * @param {Merge.hris.LinkedAccountsListRequest} request
     * @param {LinkedAccounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hris.linkedAccounts.list({
     *         cursor: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw"
     *     })
     */
    public list(
        request: Merge.hris.LinkedAccountsListRequest = {},
        requestOptions?: LinkedAccounts.RequestOptions,
    ): core.HttpResponsePromise<Merge.hris.PaginatedAccountDetailsAndActionsList> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Merge.hris.LinkedAccountsListRequest = {},
        requestOptions?: LinkedAccounts.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.hris.PaginatedAccountDetailsAndActionsList>> {
        const {
            category,
            cursor,
            endUserEmailAddress,
            endUserOrganizationName,
            endUserOriginId,
            endUserOriginIds,
            id,
            ids,
            includeDuplicates,
            integrationName,
            isTestAccount,
            pageSize,
            status,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (category != null) {
            _queryParams["category"] = serializers.hris.LinkedAccountsListRequestCategory.jsonOrThrow(category, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (endUserEmailAddress != null) {
            _queryParams["end_user_email_address"] = endUserEmailAddress;
        }

        if (endUserOrganizationName != null) {
            _queryParams["end_user_organization_name"] = endUserOrganizationName;
        }

        if (endUserOriginId != null) {
            _queryParams["end_user_origin_id"] = endUserOriginId;
        }

        if (endUserOriginIds != null) {
            _queryParams["end_user_origin_ids"] = endUserOriginIds;
        }

        if (id != null) {
            _queryParams["id"] = id;
        }

        if (ids != null) {
            _queryParams["ids"] = ids;
        }

        if (includeDuplicates != null) {
            _queryParams["include_duplicates"] = includeDuplicates.toString();
        }

        if (integrationName != null) {
            _queryParams["integration_name"] = integrationName;
        }

        if (isTestAccount != null) {
            _queryParams["is_test_account"] = isTestAccount;
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Account-Token": requestOptions?.accountToken ?? this._options?.accountToken,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                "hris/v1/linked-accounts",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.hris.PaginatedAccountDetailsAndActionsList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError("Timeout exceeded when calling GET /hris/v1/linked-accounts.");
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
