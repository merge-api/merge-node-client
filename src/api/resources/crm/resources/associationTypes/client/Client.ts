/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Merge from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";

export declare namespace AssociationTypes {
    export interface Options {
        environment?: core.Supplier<environments.MergeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        /** Override the X-Account-Token header */
        accountToken?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Account-Token header */
        accountToken?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class AssociationTypes {
    protected readonly _options: AssociationTypes.Options;

    constructor(_options: AssociationTypes.Options) {
        this._options = _options;
    }

    /**
     * Returns a list of `AssociationType` objects.
     *
     * @param {string} customObjectClassId
     * @param {Merge.crm.CustomObjectClassesAssociationTypesListRequest} request
     * @param {AssociationTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.crm.associationTypes.customObjectClassesAssociationTypesList("custom_object_class_id")
     */
    public customObjectClassesAssociationTypesList(
        customObjectClassId: string,
        request: Merge.crm.CustomObjectClassesAssociationTypesListRequest = {},
        requestOptions?: AssociationTypes.RequestOptions,
    ): core.HttpResponsePromise<Merge.crm.PaginatedAssociationTypeList> {
        return core.HttpResponsePromise.fromPromise(
            this.__customObjectClassesAssociationTypesList(customObjectClassId, request, requestOptions),
        );
    }

    private async __customObjectClassesAssociationTypesList(
        customObjectClassId: string,
        request: Merge.crm.CustomObjectClassesAssociationTypesListRequest = {},
        requestOptions?: AssociationTypes.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.crm.PaginatedAssociationTypeList>> {
        const {
            createdAfter,
            createdBefore,
            cursor,
            expand,
            includeDeletedData,
            includeRemoteData,
            includeShellData,
            modifiedAfter,
            modifiedBefore,
            pageSize,
            remoteId,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (createdAfter != null) {
            _queryParams["created_after"] = createdAfter.toISOString();
        }

        if (createdBefore != null) {
            _queryParams["created_before"] = createdBefore.toISOString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (expand != null) {
            _queryParams["expand"] = expand;
        }

        if (includeDeletedData != null) {
            _queryParams["include_deleted_data"] = includeDeletedData.toString();
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        if (modifiedAfter != null) {
            _queryParams["modified_after"] = modifiedAfter.toISOString();
        }

        if (modifiedBefore != null) {
            _queryParams["modified_before"] = modifiedBefore.toISOString();
        }

        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (remoteId != null) {
            _queryParams["remote_id"] = remoteId;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `crm/v1/custom-object-classes/${encodeURIComponent(customObjectClassId)}/association-types`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.crm.PaginatedAssociationTypeList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /crm/v1/custom-object-classes/{custom_object_class_id}/association-types.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates an `AssociationType` object with the given values.
     *
     * @param {string} customObjectClassId
     * @param {Merge.crm.CrmAssociationTypeEndpointRequest} request
     * @param {AssociationTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.crm.associationTypes.customObjectClassesAssociationTypesCreate("custom_object_class_id", {
     *         model: {
     *             sourceObjectClass: {
     *                 id: "id",
     *                 originType: "CUSTOM_OBJECT"
     *             },
     *             targetObjectClasses: [{
     *                     id: "id",
     *                     originType: "CUSTOM_OBJECT"
     *                 }],
     *             remoteKeyName: "remote_key_name"
     *         }
     *     })
     */
    public customObjectClassesAssociationTypesCreate(
        customObjectClassId: string,
        request: Merge.crm.CrmAssociationTypeEndpointRequest,
        requestOptions?: AssociationTypes.RequestOptions,
    ): core.HttpResponsePromise<Merge.crm.CrmAssociationTypeResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__customObjectClassesAssociationTypesCreate(customObjectClassId, request, requestOptions),
        );
    }

    private async __customObjectClassesAssociationTypesCreate(
        customObjectClassId: string,
        request: Merge.crm.CrmAssociationTypeEndpointRequest,
        requestOptions?: AssociationTypes.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.crm.CrmAssociationTypeResponse>> {
        const { isDebugMode, runAsync, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (isDebugMode != null) {
            _queryParams["is_debug_mode"] = isDebugMode.toString();
        }

        if (runAsync != null) {
            _queryParams["run_async"] = runAsync.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `crm/v1/custom-object-classes/${encodeURIComponent(customObjectClassId)}/association-types`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.crm.CrmAssociationTypeEndpointRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.crm.CrmAssociationTypeResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling POST /crm/v1/custom-object-classes/{custom_object_class_id}/association-types.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns an `AssociationType` object with the given `id`.
     *
     * @param {string} customObjectClassId
     * @param {string} id
     * @param {Merge.crm.CustomObjectClassesAssociationTypesRetrieveRequest} request
     * @param {AssociationTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.crm.associationTypes.customObjectClassesAssociationTypesRetrieve("custom_object_class_id", "id")
     */
    public customObjectClassesAssociationTypesRetrieve(
        customObjectClassId: string,
        id: string,
        request: Merge.crm.CustomObjectClassesAssociationTypesRetrieveRequest = {},
        requestOptions?: AssociationTypes.RequestOptions,
    ): core.HttpResponsePromise<Merge.crm.AssociationType> {
        return core.HttpResponsePromise.fromPromise(
            this.__customObjectClassesAssociationTypesRetrieve(customObjectClassId, id, request, requestOptions),
        );
    }

    private async __customObjectClassesAssociationTypesRetrieve(
        customObjectClassId: string,
        id: string,
        request: Merge.crm.CustomObjectClassesAssociationTypesRetrieveRequest = {},
        requestOptions?: AssociationTypes.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.crm.AssociationType>> {
        const { expand, includeRemoteData, includeShellData } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            _queryParams["expand"] = expand;
        }

        if (includeRemoteData != null) {
            _queryParams["include_remote_data"] = includeRemoteData.toString();
        }

        if (includeShellData != null) {
            _queryParams["include_shell_data"] = includeShellData.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `crm/v1/custom-object-classes/${encodeURIComponent(customObjectClassId)}/association-types/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.crm.AssociationType.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /crm/v1/custom-object-classes/{custom_object_class_id}/association-types/{id}.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns metadata for `CRMAssociationType` POSTs.
     *
     * @param {string} customObjectClassId
     * @param {AssociationTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.crm.associationTypes.customObjectClassesAssociationTypesMetaPostRetrieve("custom_object_class_id")
     */
    public customObjectClassesAssociationTypesMetaPostRetrieve(
        customObjectClassId: string,
        requestOptions?: AssociationTypes.RequestOptions,
    ): core.HttpResponsePromise<Merge.crm.MetaResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__customObjectClassesAssociationTypesMetaPostRetrieve(customObjectClassId, requestOptions),
        );
    }

    private async __customObjectClassesAssociationTypesMetaPostRetrieve(
        customObjectClassId: string,
        requestOptions?: AssociationTypes.RequestOptions,
    ): Promise<core.WithRawResponse<Merge.crm.MetaResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MergeEnvironment.Production,
                `crm/v1/custom-object-classes/${encodeURIComponent(customObjectClassId)}/association-types/meta/post`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Account-Token": requestOptions?.accountToken,
                }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.crm.MetaResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MergeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MergeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MergeTimeoutError(
                    "Timeout exceeded when calling GET /crm/v1/custom-object-classes/{custom_object_class_id}/association-types/meta/post.",
                );
            case "unknown":
                throw new errors.MergeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.apiKey)}`;
    }
}
