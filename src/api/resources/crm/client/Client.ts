/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { AccountDetails } from "../resources/accountDetails/client/Client";
import { AccountToken } from "../resources/accountToken/client/Client";
import { Accounts } from "../resources/accounts/client/Client";
import { AsyncPassthrough } from "../resources/asyncPassthrough/client/Client";
import { AuditTrail } from "../resources/auditTrail/client/Client";
import { AvailableActions } from "../resources/availableActions/client/Client";
import { Contacts } from "../resources/contacts/client/Client";
import { CustomObjectClasses } from "../resources/customObjectClasses/client/Client";
import { AssociationTypes } from "../resources/associationTypes/client/Client";
import { CustomObjects } from "../resources/customObjects/client/Client";
import { Associations } from "../resources/associations/client/Client";
import { Scopes } from "../resources/scopes/client/Client";
import { DeleteAccount } from "../resources/deleteAccount/client/Client";
import { EngagementTypes } from "../resources/engagementTypes/client/Client";
import { Engagements } from "../resources/engagements/client/Client";
import { FieldMapping } from "../resources/fieldMapping/client/Client";
import { GenerateKey } from "../resources/generateKey/client/Client";
import { Issues } from "../resources/issues/client/Client";
import { Leads } from "../resources/leads/client/Client";
import { LinkToken } from "../resources/linkToken/client/Client";
import { LinkedAccounts } from "../resources/linkedAccounts/client/Client";
import { Notes } from "../resources/notes/client/Client";
import { Opportunities } from "../resources/opportunities/client/Client";
import { Passthrough } from "../resources/passthrough/client/Client";
import { RegenerateKey } from "../resources/regenerateKey/client/Client";
import { Stages } from "../resources/stages/client/Client";
import { SyncStatus } from "../resources/syncStatus/client/Client";
import { ForceResync } from "../resources/forceResync/client/Client";
import { Tasks } from "../resources/tasks/client/Client";
import { Users } from "../resources/users/client/Client";
import { WebhookReceivers } from "../resources/webhookReceivers/client/Client";

export declare namespace Crm {
    export interface Options {
        environment?: core.Supplier<environments.MergeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        /** Override the X-Account-Token header */
        accountToken?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
}

export class Crm {
    protected _accountDetails: AccountDetails | undefined;
    protected _accountToken: AccountToken | undefined;
    protected _accounts: Accounts | undefined;
    protected _asyncPassthrough: AsyncPassthrough | undefined;
    protected _auditTrail: AuditTrail | undefined;
    protected _availableActions: AvailableActions | undefined;
    protected _contacts: Contacts | undefined;
    protected _customObjectClasses: CustomObjectClasses | undefined;
    protected _associationTypes: AssociationTypes | undefined;
    protected _customObjects: CustomObjects | undefined;
    protected _associations: Associations | undefined;
    protected _scopes: Scopes | undefined;
    protected _deleteAccount: DeleteAccount | undefined;
    protected _engagementTypes: EngagementTypes | undefined;
    protected _engagements: Engagements | undefined;
    protected _fieldMapping: FieldMapping | undefined;
    protected _generateKey: GenerateKey | undefined;
    protected _issues: Issues | undefined;
    protected _leads: Leads | undefined;
    protected _linkToken: LinkToken | undefined;
    protected _linkedAccounts: LinkedAccounts | undefined;
    protected _notes: Notes | undefined;
    protected _opportunities: Opportunities | undefined;
    protected _passthrough: Passthrough | undefined;
    protected _regenerateKey: RegenerateKey | undefined;
    protected _stages: Stages | undefined;
    protected _syncStatus: SyncStatus | undefined;
    protected _forceResync: ForceResync | undefined;
    protected _tasks: Tasks | undefined;
    protected _users: Users | undefined;
    protected _webhookReceivers: WebhookReceivers | undefined;

    constructor(protected readonly _options: Crm.Options) {}

    public get accountDetails(): AccountDetails {
        return (this._accountDetails ??= new AccountDetails(this._options));
    }

    public get accountToken(): AccountToken {
        return (this._accountToken ??= new AccountToken(this._options));
    }

    public get accounts(): Accounts {
        return (this._accounts ??= new Accounts(this._options));
    }

    public get asyncPassthrough(): AsyncPassthrough {
        return (this._asyncPassthrough ??= new AsyncPassthrough(this._options));
    }

    public get auditTrail(): AuditTrail {
        return (this._auditTrail ??= new AuditTrail(this._options));
    }

    public get availableActions(): AvailableActions {
        return (this._availableActions ??= new AvailableActions(this._options));
    }

    public get contacts(): Contacts {
        return (this._contacts ??= new Contacts(this._options));
    }

    public get customObjectClasses(): CustomObjectClasses {
        return (this._customObjectClasses ??= new CustomObjectClasses(this._options));
    }

    public get associationTypes(): AssociationTypes {
        return (this._associationTypes ??= new AssociationTypes(this._options));
    }

    public get customObjects(): CustomObjects {
        return (this._customObjects ??= new CustomObjects(this._options));
    }

    public get associations(): Associations {
        return (this._associations ??= new Associations(this._options));
    }

    public get scopes(): Scopes {
        return (this._scopes ??= new Scopes(this._options));
    }

    public get deleteAccount(): DeleteAccount {
        return (this._deleteAccount ??= new DeleteAccount(this._options));
    }

    public get engagementTypes(): EngagementTypes {
        return (this._engagementTypes ??= new EngagementTypes(this._options));
    }

    public get engagements(): Engagements {
        return (this._engagements ??= new Engagements(this._options));
    }

    public get fieldMapping(): FieldMapping {
        return (this._fieldMapping ??= new FieldMapping(this._options));
    }

    public get generateKey(): GenerateKey {
        return (this._generateKey ??= new GenerateKey(this._options));
    }

    public get issues(): Issues {
        return (this._issues ??= new Issues(this._options));
    }

    public get leads(): Leads {
        return (this._leads ??= new Leads(this._options));
    }

    public get linkToken(): LinkToken {
        return (this._linkToken ??= new LinkToken(this._options));
    }

    public get linkedAccounts(): LinkedAccounts {
        return (this._linkedAccounts ??= new LinkedAccounts(this._options));
    }

    public get notes(): Notes {
        return (this._notes ??= new Notes(this._options));
    }

    public get opportunities(): Opportunities {
        return (this._opportunities ??= new Opportunities(this._options));
    }

    public get passthrough(): Passthrough {
        return (this._passthrough ??= new Passthrough(this._options));
    }

    public get regenerateKey(): RegenerateKey {
        return (this._regenerateKey ??= new RegenerateKey(this._options));
    }

    public get stages(): Stages {
        return (this._stages ??= new Stages(this._options));
    }

    public get syncStatus(): SyncStatus {
        return (this._syncStatus ??= new SyncStatus(this._options));
    }

    public get forceResync(): ForceResync {
        return (this._forceResync ??= new ForceResync(this._options));
    }

    public get tasks(): Tasks {
        return (this._tasks ??= new Tasks(this._options));
    }

    public get users(): Users {
        return (this._users ??= new Users(this._options));
    }

    public get webhookReceivers(): WebhookReceivers {
        return (this._webhookReceivers ??= new WebhookReceivers(this._options));
    }
}
