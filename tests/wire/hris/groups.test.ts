/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MergeClient } from "../../../src/Client";

describe("Groups", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "134e0111-0f67-44f6-98f0-597000290bb3",
                    remote_id: "800293",
                    created_at: "2021-09-15T00:00:00Z",
                    modified_at: "2021-10-16T00:00:00Z",
                    parent_group: "2ef51b11-2c4e-4b02-8d1d-50592d9e96ef",
                    name: "COST_CENTER_US",
                    type: "TEAM",
                    is_commonly_used_as_team: true,
                    remote_was_deleted: true,
                    field_mappings: {
                        organization_defined_targets: { custom_key: "custom_value" },
                        linked_account_defined_targets: { custom_key: "custom_value" },
                    },
                    remote_data: [{ path: "/group", data: ["Varies by platform"] }],
                },
            ],
        };
        server.mockEndpoint().get("/hris/v1/groups").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.hris.groups.list();
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "134e0111-0f67-44f6-98f0-597000290bb3",
                    remoteId: "800293",
                    createdAt: new Date("2021-09-15T00:00:00.000Z"),
                    modifiedAt: new Date("2021-10-16T00:00:00.000Z"),
                    parentGroup: "2ef51b11-2c4e-4b02-8d1d-50592d9e96ef",
                    name: "COST_CENTER_US",
                    type: "TEAM",
                    isCommonlyUsedAsTeam: true,
                    remoteWasDeleted: true,
                    fieldMappings: {
                        organization_defined_targets: {
                            custom_key: "custom_value",
                        },
                        linked_account_defined_targets: {
                            custom_key: "custom_value",
                        },
                    },
                    remoteData: [
                        {
                            path: "/group",
                            data: ["Varies by platform"],
                        },
                    ],
                },
            ],
        });
    });

    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "134e0111-0f67-44f6-98f0-597000290bb3",
            remote_id: "800293",
            created_at: "2021-09-15T00:00:00Z",
            modified_at: "2021-10-16T00:00:00Z",
            parent_group: "2ef51b11-2c4e-4b02-8d1d-50592d9e96ef",
            name: "COST_CENTER_US",
            type: "TEAM",
            is_commonly_used_as_team: true,
            remote_was_deleted: true,
            field_mappings: {
                organization_defined_targets: { custom_key: "custom_value" },
                linked_account_defined_targets: { custom_key: "custom_value" },
            },
            remote_data: [{ path: "/group", data: ["Varies by platform"] }],
        };
        server.mockEndpoint().get("/hris/v1/groups/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.hris.groups.retrieve("id");
        expect(response).toEqual({
            id: "134e0111-0f67-44f6-98f0-597000290bb3",
            remoteId: "800293",
            createdAt: new Date("2021-09-15T00:00:00.000Z"),
            modifiedAt: new Date("2021-10-16T00:00:00.000Z"),
            parentGroup: "2ef51b11-2c4e-4b02-8d1d-50592d9e96ef",
            name: "COST_CENTER_US",
            type: "TEAM",
            isCommonlyUsedAsTeam: true,
            remoteWasDeleted: true,
            fieldMappings: {
                organization_defined_targets: {
                    custom_key: "custom_value",
                },
                linked_account_defined_targets: {
                    custom_key: "custom_value",
                },
            },
            remoteData: [
                {
                    path: "/group",
                    data: ["Varies by platform"],
                },
            ],
        });
    });
});
