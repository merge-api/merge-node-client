/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MergeClient } from "../../../src/Client";

describe("AvailableActions", () => {
    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            integration: {
                name: "name",
                abbreviated_name: "abbreviated_name",
                categories: ["hris"],
                image: "image",
                square_image: "square_image",
                color: "color",
                slug: "slug",
                api_endpoints_to_documentation_urls: { key: "value" },
                webhook_setup_guide_url: "webhook_setup_guide_url",
                category_beta_status: { key: "value" },
            },
            passthrough_available: true,
            available_model_operations: [
                {
                    model_name: "Candidate",
                    available_operations: ["FETCH", "CREATE"],
                    required_post_parameters: ["remote_user_id"],
                    supported_fields: ["first_name", "last_name", "company", "title"],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/crm/v1/available-actions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.crm.availableActions.retrieve();
        expect(response).toEqual({
            integration: {
                name: "name",
                abbreviatedName: "abbreviated_name",
                categories: ["hris"],
                image: "image",
                squareImage: "square_image",
                color: "color",
                slug: "slug",
                apiEndpointsToDocumentationUrls: {
                    key: "value",
                },
                webhookSetupGuideUrl: "webhook_setup_guide_url",
                categoryBetaStatus: {
                    key: "value",
                },
            },
            passthroughAvailable: true,
            availableModelOperations: [
                {
                    modelName: "Candidate",
                    availableOperations: ["FETCH", "CREATE"],
                    requiredPostParameters: ["remote_user_id"],
                    supportedFields: ["first_name", "last_name", "company", "title"],
                },
            ],
        });
    });
});
