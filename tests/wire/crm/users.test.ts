/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MergeClient } from "../../../src/Client";

describe("Users", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "0358cbc6-2040-430a-848e-aafacbadf3aa",
                    remote_id: "19202938",
                    created_at: "2021-09-15T00:00:00Z",
                    modified_at: "2021-10-16T00:00:00Z",
                    name: "Gil Feig",
                    email: "merge_is_hiring@merge.dev",
                    is_active: true,
                    remote_was_deleted: true,
                    field_mappings: {
                        organization_defined_targets: { custom_key: "custom_value" },
                        linked_account_defined_targets: { custom_key: "custom_value" },
                    },
                    remote_data: [{ path: "/users", data: ["Varies by platform"] }],
                    remote_fields: [{ remote_field_class: "remote_field_class" }],
                },
            ],
        };
        server.mockEndpoint().get("/crm/v1/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.crm.users.list({
            cursor: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
        });
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "0358cbc6-2040-430a-848e-aafacbadf3aa",
                    remoteId: "19202938",
                    createdAt: new Date("2021-09-15T00:00:00.000Z"),
                    modifiedAt: new Date("2021-10-16T00:00:00.000Z"),
                    name: "Gil Feig",
                    email: "merge_is_hiring@merge.dev",
                    isActive: true,
                    remoteWasDeleted: true,
                    fieldMappings: {
                        organization_defined_targets: {
                            custom_key: "custom_value",
                        },
                        linked_account_defined_targets: {
                            custom_key: "custom_value",
                        },
                    },
                    remoteData: [
                        {
                            path: "/users",
                            data: ["Varies by platform"],
                        },
                    ],
                    remoteFields: [
                        {
                            remoteFieldClass: "remote_field_class",
                        },
                    ],
                },
            ],
        });
    });

    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "0358cbc6-2040-430a-848e-aafacbadf3aa",
            remote_id: "19202938",
            created_at: "2021-09-15T00:00:00Z",
            modified_at: "2021-10-16T00:00:00Z",
            name: "Gil Feig",
            email: "merge_is_hiring@merge.dev",
            is_active: true,
            remote_was_deleted: true,
            field_mappings: {
                organization_defined_targets: { custom_key: "custom_value" },
                linked_account_defined_targets: { custom_key: "custom_value" },
            },
            remote_data: [{ path: "/users", data: ["Varies by platform"] }],
            remote_fields: [{ remote_field_class: "remote_field_class", value: { key: "value" } }],
        };
        server.mockEndpoint().get("/crm/v1/users/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.crm.users.retrieve("id");
        expect(response).toEqual({
            id: "0358cbc6-2040-430a-848e-aafacbadf3aa",
            remoteId: "19202938",
            createdAt: new Date("2021-09-15T00:00:00.000Z"),
            modifiedAt: new Date("2021-10-16T00:00:00.000Z"),
            name: "Gil Feig",
            email: "merge_is_hiring@merge.dev",
            isActive: true,
            remoteWasDeleted: true,
            fieldMappings: {
                organization_defined_targets: {
                    custom_key: "custom_value",
                },
                linked_account_defined_targets: {
                    custom_key: "custom_value",
                },
            },
            remoteData: [
                {
                    path: "/users",
                    data: ["Varies by platform"],
                },
            ],
            remoteFields: [
                {
                    remoteFieldClass: "remote_field_class",
                    value: {
                        key: "value",
                    },
                },
            ],
        });
    });

    test("ignoreCreate", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });
        const rawRequestBody = { reason: "GENERAL_CUSTOMER_REQUEST" };

        server
            .mockEndpoint()
            .post("/crm/v1/users/ignore/model_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.crm.users.ignoreCreate("model_id", {
            reason: "GENERAL_CUSTOMER_REQUEST",
        });
        expect(response).toEqual(undefined);
    });

    test("remoteFieldClassesList", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "id",
                    display_name: "display_name",
                    remote_key_name: "remote_key_name",
                    description: "description",
                    is_custom: true,
                    is_common_model_field: true,
                    is_required: true,
                    field_type: "string",
                    field_format: "string",
                    field_choices: [{}],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/crm/v1/users/remote-field-classes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.crm.users.remoteFieldClassesList({
            cursor: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
        });
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "id",
                    displayName: "display_name",
                    remoteKeyName: "remote_key_name",
                    description: "description",
                    isCustom: true,
                    isCommonModelField: true,
                    isRequired: true,
                    fieldType: "string",
                    fieldFormat: "string",
                    fieldChoices: [{}],
                },
            ],
        });
    });
});
