/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MergeClient } from "../../../src/Client";

describe("ForceResync", () => {
    test("sync_status_resync_create", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                model_name: "Account",
                model_id: "crm.Account",
                last_sync_start: "2021-03-30T19:44:18Z",
                next_sync_start: "2021-03-30T20:44:18Z",
                last_sync_result: "SYNCING",
                last_sync_finished: "2021-03-30T19:55:18Z",
                status: "SYNCING",
                is_initial_sync: true,
                selective_sync_configurations_usage: "IN_NEXT_SYNC",
            },
        ];
        server
            .mockEndpoint()
            .post("/crm/v1/sync-status/resync")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.crm.forceResync.syncStatusResyncCreate();
        expect(response).toEqual([
            {
                modelName: "Account",
                modelId: "crm.Account",
                lastSyncStart: new Date("2021-03-30T19:44:18.000Z"),
                nextSyncStart: new Date("2021-03-30T20:44:18.000Z"),
                lastSyncResult: "SYNCING",
                lastSyncFinished: new Date("2021-03-30T19:55:18.000Z"),
                status: "SYNCING",
                isInitialSync: true,
                selectiveSyncConfigurationsUsage: "IN_NEXT_SYNC",
            },
        ]);
    });
});
