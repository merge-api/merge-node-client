/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MergeClient } from "../../../src/Client";

describe("ExpenseReports", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    remote_id: "exp_123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-31T12:00:00Z",
                    modified_at: "2024-01-31T14:30:00Z",
                    report_date: "2024-01-31T00:00:00Z",
                    report_identifier: "EXP-2024-001",
                    employee: "b9a9b824-6172-4d63-9d90-1c8a86c4f3b1",
                    status: "DRAFT",
                    total_amount: 150,
                    lines: [
                        {
                            id: "1234",
                            remote_id: "abcd-1234",
                            created_at: "2021-09-15T00:00:00Z",
                            modified_at: "2021-10-16T00:00:00Z",
                            account: "acc-1234",
                            description: "Client lunch meeting",
                            expense_date: "2024-01-15T00:00:00Z",
                            amount: 50,
                            currency: "USD",
                            exchange_rate: "exchange_rate",
                            is_billable: true,
                            tracking_categories: ["cat-1", "cat-2"],
                            employee: "emp-1234",
                            project: "proj-5678",
                            company: "comp-1234",
                            contact: "cont-5678",
                            quantity: 1,
                            unit_price: 50,
                            non_reimbursable: false,
                            tax_amount: 5,
                            inclusive_of_tax: false,
                            tax_rate: "tax-1234",
                            remote_was_deleted: false,
                        },
                    ],
                    currency: "XUA",
                    description: "January 2024 Travel Expenses",
                    accounting_period: "7d793c67-9f72-4a6b-9256-3936f237b0d9",
                    company: "company",
                    tracking_categories: [
                        "a1b2c3d4-e5f6-4a5b-9c3d-2e1f0a9b8c7d",
                        "d4c3b2a1-9e8f-7g6h-5i4j-3k2l1m0n9o8p",
                    ],
                    remote_was_deleted: true,
                    field_mappings: {
                        organization_defined_targets: { custom_key: "custom_value" },
                        linked_account_defined_targets: { custom_key: "custom_value" },
                    },
                    remote_data: [{ path: "/actions", data: ["Varies by platform"] }],
                    remote_fields: [{ remote_field_class: "remote_field_class" }],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/accounting/v1/expense-reports")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.expenseReports.list();
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    remoteId: "exp_123e4567-e89b-12d3-a456-426614174000",
                    createdAt: new Date("2024-01-31T12:00:00.000Z"),
                    modifiedAt: new Date("2024-01-31T14:30:00.000Z"),
                    reportDate: new Date("2024-01-31T00:00:00.000Z"),
                    reportIdentifier: "EXP-2024-001",
                    employee: "b9a9b824-6172-4d63-9d90-1c8a86c4f3b1",
                    status: "DRAFT",
                    totalAmount: 150,
                    lines: [
                        {
                            id: "1234",
                            remoteId: "abcd-1234",
                            createdAt: new Date("2021-09-15T00:00:00.000Z"),
                            modifiedAt: new Date("2021-10-16T00:00:00.000Z"),
                            account: "acc-1234",
                            description: "Client lunch meeting",
                            expenseDate: new Date("2024-01-15T00:00:00.000Z"),
                            amount: 50,
                            currency: "USD",
                            exchangeRate: "exchange_rate",
                            isBillable: true,
                            trackingCategories: ["cat-1", "cat-2"],
                            employee: "emp-1234",
                            project: "proj-5678",
                            company: "comp-1234",
                            contact: "cont-5678",
                            quantity: 1,
                            unitPrice: 50,
                            nonReimbursable: false,
                            taxAmount: 5,
                            inclusiveOfTax: false,
                            taxRate: "tax-1234",
                            remoteWasDeleted: false,
                        },
                    ],
                    currency: "XUA",
                    description: "January 2024 Travel Expenses",
                    accountingPeriod: "7d793c67-9f72-4a6b-9256-3936f237b0d9",
                    company: "company",
                    trackingCategories: [
                        "a1b2c3d4-e5f6-4a5b-9c3d-2e1f0a9b8c7d",
                        "d4c3b2a1-9e8f-7g6h-5i4j-3k2l1m0n9o8p",
                    ],
                    remoteWasDeleted: true,
                    fieldMappings: {
                        organization_defined_targets: {
                            custom_key: "custom_value",
                        },
                        linked_account_defined_targets: {
                            custom_key: "custom_value",
                        },
                    },
                    remoteData: [
                        {
                            path: "/actions",
                            data: ["Varies by platform"],
                        },
                    ],
                    remoteFields: [
                        {
                            remoteFieldClass: "remote_field_class",
                        },
                    ],
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            model: {
                tracking_categories: ["a1b2c3d4-e5f6-4a5b-9c3d-2e1f0a9b8c7d", "d4c3b2a1-9e8f-7g6h-5i4j-3k2l1m0n9o8p"],
            },
        };
        const rawResponseBody = {
            model: {
                id: "123e4567-e89b-12d3-a456-426614174000",
                remote_id: "exp_123e4567-e89b-12d3-a456-426614174000",
                created_at: "2024-01-31T12:00:00Z",
                modified_at: "2024-01-31T14:30:00Z",
                report_date: "2024-01-31T00:00:00Z",
                report_identifier: "EXP-2024-001",
                employee: "b9a9b824-6172-4d63-9d90-1c8a86c4f3b1",
                status: "DRAFT",
                total_amount: 150,
                lines: [
                    {
                        id: "1234",
                        remote_id: "abcd-1234",
                        created_at: "2021-09-15T00:00:00Z",
                        modified_at: "2021-10-16T00:00:00Z",
                        account: "acc-1234",
                        description: "Client lunch meeting",
                        expense_date: "2024-01-15T00:00:00Z",
                        amount: 50,
                        currency: "USD",
                        exchange_rate: "exchange_rate",
                        is_billable: true,
                        tracking_categories: ["cat-1", "cat-2"],
                        employee: "emp-1234",
                        project: "proj-5678",
                        company: "comp-1234",
                        contact: "cont-5678",
                        quantity: 1,
                        unit_price: 50,
                        non_reimbursable: false,
                        tax_amount: 5,
                        inclusive_of_tax: false,
                        tax_rate: "tax-1234",
                        remote_was_deleted: false,
                    },
                ],
                currency: "XUA",
                description: "January 2024 Travel Expenses",
                accounting_period: "7d793c67-9f72-4a6b-9256-3936f237b0d9",
                company: "company",
                tracking_categories: ["a1b2c3d4-e5f6-4a5b-9c3d-2e1f0a9b8c7d", "d4c3b2a1-9e8f-7g6h-5i4j-3k2l1m0n9o8p"],
                remote_was_deleted: true,
                field_mappings: {
                    organization_defined_targets: { custom_key: "custom_value" },
                    linked_account_defined_targets: { custom_key: "custom_value" },
                },
                remote_data: [{ path: "/actions", data: ["Varies by platform"] }],
                remote_fields: [{ remote_field_class: "remote_field_class" }],
            },
            warnings: [
                {
                    source: { pointer: "pointer" },
                    title: "Unrecognized Field",
                    detail: "An unrecognized field, age, was passed in with request data.",
                    problem_type: "UNRECOGNIZED_FIELD",
                },
            ],
            errors: [
                {
                    source: { pointer: "pointer" },
                    title: "Missing Required Field",
                    detail: "custom_fields is a required field on model.",
                    problem_type: "MISSING_REQUIRED_FIELD",
                },
            ],
            logs: [
                {
                    log_id: "99433219-8017-4acd-bb3c-ceb23d663832",
                    dashboard_view: "https://app.merge.dev/logs/99433219-8017-4acd-bb3c-ceb23d663832",
                    log_summary: {
                        url: "www.exampleintegration.com/api/v1/exampleapi",
                        method: "POST",
                        status_code: 200,
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/accounting/v1/expense-reports")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.expenseReports.create({
            model: {
                trackingCategories: ["a1b2c3d4-e5f6-4a5b-9c3d-2e1f0a9b8c7d", "d4c3b2a1-9e8f-7g6h-5i4j-3k2l1m0n9o8p"],
            },
        });
        expect(response).toEqual({
            model: {
                id: "123e4567-e89b-12d3-a456-426614174000",
                remoteId: "exp_123e4567-e89b-12d3-a456-426614174000",
                createdAt: new Date("2024-01-31T12:00:00.000Z"),
                modifiedAt: new Date("2024-01-31T14:30:00.000Z"),
                reportDate: new Date("2024-01-31T00:00:00.000Z"),
                reportIdentifier: "EXP-2024-001",
                employee: "b9a9b824-6172-4d63-9d90-1c8a86c4f3b1",
                status: "DRAFT",
                totalAmount: 150,
                lines: [
                    {
                        id: "1234",
                        remoteId: "abcd-1234",
                        createdAt: new Date("2021-09-15T00:00:00.000Z"),
                        modifiedAt: new Date("2021-10-16T00:00:00.000Z"),
                        account: "acc-1234",
                        description: "Client lunch meeting",
                        expenseDate: new Date("2024-01-15T00:00:00.000Z"),
                        amount: 50,
                        currency: "USD",
                        exchangeRate: "exchange_rate",
                        isBillable: true,
                        trackingCategories: ["cat-1", "cat-2"],
                        employee: "emp-1234",
                        project: "proj-5678",
                        company: "comp-1234",
                        contact: "cont-5678",
                        quantity: 1,
                        unitPrice: 50,
                        nonReimbursable: false,
                        taxAmount: 5,
                        inclusiveOfTax: false,
                        taxRate: "tax-1234",
                        remoteWasDeleted: false,
                    },
                ],
                currency: "XUA",
                description: "January 2024 Travel Expenses",
                accountingPeriod: "7d793c67-9f72-4a6b-9256-3936f237b0d9",
                company: "company",
                trackingCategories: ["a1b2c3d4-e5f6-4a5b-9c3d-2e1f0a9b8c7d", "d4c3b2a1-9e8f-7g6h-5i4j-3k2l1m0n9o8p"],
                remoteWasDeleted: true,
                fieldMappings: {
                    organization_defined_targets: {
                        custom_key: "custom_value",
                    },
                    linked_account_defined_targets: {
                        custom_key: "custom_value",
                    },
                },
                remoteData: [
                    {
                        path: "/actions",
                        data: ["Varies by platform"],
                    },
                ],
                remoteFields: [
                    {
                        remoteFieldClass: "remote_field_class",
                    },
                ],
            },
            warnings: [
                {
                    source: {
                        pointer: "pointer",
                    },
                    title: "Unrecognized Field",
                    detail: "An unrecognized field, age, was passed in with request data.",
                    problemType: "UNRECOGNIZED_FIELD",
                },
            ],
            errors: [
                {
                    source: {
                        pointer: "pointer",
                    },
                    title: "Missing Required Field",
                    detail: "custom_fields is a required field on model.",
                    problemType: "MISSING_REQUIRED_FIELD",
                },
            ],
            logs: [
                {
                    logId: "99433219-8017-4acd-bb3c-ceb23d663832",
                    dashboardView: "https://app.merge.dev/logs/99433219-8017-4acd-bb3c-ceb23d663832",
                    logSummary: {
                        url: "www.exampleintegration.com/api/v1/exampleapi",
                        method: "POST",
                        statusCode: 200,
                    },
                },
            ],
        });
    });

    test("linesList", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "1234",
                    remote_id: "abcd-1234",
                    created_at: "2021-09-15T00:00:00Z",
                    modified_at: "2021-10-16T00:00:00Z",
                    account: "account",
                    description: "Client lunch meeting",
                    expense_date: "2024-01-15T00:00:00Z",
                    amount: 50,
                    currency: "XUA",
                    exchange_rate: "exchange_rate",
                    is_billable: true,
                    tracking_categories: ["cat-1", "cat-2"],
                    employee: "employee",
                    project: "project",
                    company: "company",
                    contact: "contact",
                    quantity: 1,
                    unit_price: 50,
                    non_reimbursable: true,
                    tax_amount: 5,
                    inclusive_of_tax: true,
                    tax_rate: "tax_rate",
                    remote_was_deleted: true,
                    remote_fields: [{ remote_field_class: "remote_field_class" }],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/accounting/v1/expense-reports/expense_report_id/lines")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.expenseReports.linesList("expense_report_id");
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "1234",
                    remoteId: "abcd-1234",
                    createdAt: new Date("2021-09-15T00:00:00.000Z"),
                    modifiedAt: new Date("2021-10-16T00:00:00.000Z"),
                    account: "account",
                    description: "Client lunch meeting",
                    expenseDate: new Date("2024-01-15T00:00:00.000Z"),
                    amount: 50,
                    currency: "XUA",
                    exchangeRate: "exchange_rate",
                    isBillable: true,
                    trackingCategories: ["cat-1", "cat-2"],
                    employee: "employee",
                    project: "project",
                    company: "company",
                    contact: "contact",
                    quantity: 1,
                    unitPrice: 50,
                    nonReimbursable: true,
                    taxAmount: 5,
                    inclusiveOfTax: true,
                    taxRate: "tax_rate",
                    remoteWasDeleted: true,
                    remoteFields: [
                        {
                            remoteFieldClass: "remote_field_class",
                        },
                    ],
                },
            ],
        });
    });

    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            remote_id: "exp_123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-31T12:00:00Z",
            modified_at: "2024-01-31T14:30:00Z",
            report_date: "2024-01-31T00:00:00Z",
            report_identifier: "EXP-2024-001",
            employee: "b9a9b824-6172-4d63-9d90-1c8a86c4f3b1",
            status: "DRAFT",
            total_amount: 150,
            lines: [
                {
                    id: "1234",
                    remote_id: "abcd-1234",
                    created_at: "2021-09-15T00:00:00Z",
                    modified_at: "2021-10-16T00:00:00Z",
                    account: "acc-1234",
                    description: "Client lunch meeting",
                    expense_date: "2024-01-15T00:00:00Z",
                    amount: 50,
                    currency: "USD",
                    exchange_rate: "exchange_rate",
                    is_billable: true,
                    tracking_categories: ["cat-1", "cat-2"],
                    employee: "emp-1234",
                    project: "proj-5678",
                    company: "comp-1234",
                    contact: "cont-5678",
                    quantity: 1,
                    unit_price: 50,
                    non_reimbursable: false,
                    tax_amount: 5,
                    inclusive_of_tax: false,
                    tax_rate: "tax-1234",
                    remote_was_deleted: false,
                    remote_fields: [{ remote_field_class: "remote_field_class" }],
                },
            ],
            currency: "XUA",
            description: "January 2024 Travel Expenses",
            accounting_period: "7d793c67-9f72-4a6b-9256-3936f237b0d9",
            company: "company",
            tracking_categories: ["a1b2c3d4-e5f6-4a5b-9c3d-2e1f0a9b8c7d", "d4c3b2a1-9e8f-7g6h-5i4j-3k2l1m0n9o8p"],
            remote_was_deleted: true,
            field_mappings: {
                organization_defined_targets: { custom_key: "custom_value" },
                linked_account_defined_targets: { custom_key: "custom_value" },
            },
            remote_data: [{ path: "/actions", data: ["Varies by platform"] }],
            remote_fields: [{ remote_field_class: "remote_field_class", value: { key: "value" } }],
        };
        server
            .mockEndpoint()
            .get("/accounting/v1/expense-reports/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.expenseReports.retrieve("id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            remoteId: "exp_123e4567-e89b-12d3-a456-426614174000",
            createdAt: new Date("2024-01-31T12:00:00.000Z"),
            modifiedAt: new Date("2024-01-31T14:30:00.000Z"),
            reportDate: new Date("2024-01-31T00:00:00.000Z"),
            reportIdentifier: "EXP-2024-001",
            employee: "b9a9b824-6172-4d63-9d90-1c8a86c4f3b1",
            status: "DRAFT",
            totalAmount: 150,
            lines: [
                {
                    id: "1234",
                    remoteId: "abcd-1234",
                    createdAt: new Date("2021-09-15T00:00:00.000Z"),
                    modifiedAt: new Date("2021-10-16T00:00:00.000Z"),
                    account: "acc-1234",
                    description: "Client lunch meeting",
                    expenseDate: new Date("2024-01-15T00:00:00.000Z"),
                    amount: 50,
                    currency: "USD",
                    exchangeRate: "exchange_rate",
                    isBillable: true,
                    trackingCategories: ["cat-1", "cat-2"],
                    employee: "emp-1234",
                    project: "proj-5678",
                    company: "comp-1234",
                    contact: "cont-5678",
                    quantity: 1,
                    unitPrice: 50,
                    nonReimbursable: false,
                    taxAmount: 5,
                    inclusiveOfTax: false,
                    taxRate: "tax-1234",
                    remoteWasDeleted: false,
                    remoteFields: [
                        {
                            remoteFieldClass: "remote_field_class",
                        },
                    ],
                },
            ],
            currency: "XUA",
            description: "January 2024 Travel Expenses",
            accountingPeriod: "7d793c67-9f72-4a6b-9256-3936f237b0d9",
            company: "company",
            trackingCategories: ["a1b2c3d4-e5f6-4a5b-9c3d-2e1f0a9b8c7d", "d4c3b2a1-9e8f-7g6h-5i4j-3k2l1m0n9o8p"],
            remoteWasDeleted: true,
            fieldMappings: {
                organization_defined_targets: {
                    custom_key: "custom_value",
                },
                linked_account_defined_targets: {
                    custom_key: "custom_value",
                },
            },
            remoteData: [
                {
                    path: "/actions",
                    data: ["Varies by platform"],
                },
            ],
            remoteFields: [
                {
                    remoteFieldClass: "remote_field_class",
                    value: {
                        key: "value",
                    },
                },
            ],
        });
    });

    test("linesRemoteFieldClassesList", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "id",
                    display_name: "display_name",
                    remote_key_name: "remote_key_name",
                    description: "description",
                    is_custom: true,
                    is_required: true,
                    field_type: "string",
                    field_format: "string",
                    field_choices: ["field_choices"],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/accounting/v1/expense-reports/lines/remote-field-classes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.expenseReports.linesRemoteFieldClassesList();
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "id",
                    displayName: "display_name",
                    remoteKeyName: "remote_key_name",
                    description: "description",
                    isCustom: true,
                    isRequired: true,
                    fieldType: "string",
                    fieldFormat: "string",
                    fieldChoices: ["field_choices"],
                },
            ],
        });
    });

    test("metaPostRetrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            request_schema: {
                type: "object",
                properties: {
                    model: {
                        type: "object",
                        required: [
                            "last_name",
                            "first_name",
                            "merge_categories",
                            "new_york_city_neighborhood",
                            "favorite_tv_shows",
                            "favorite_watch",
                        ],
                        properties: {
                            email_addresses: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        value: { type: "string", title: "value" },
                                        email_address_type: { type: "string", title: "email_address_type" },
                                        integration_params: {
                                            type: "object",
                                            title: "integration_params",
                                            properties: {},
                                        },
                                        linked_account_params: {
                                            type: "object",
                                            title: "linked_account_params",
                                            properties: {},
                                        },
                                    },
                                },
                                title: "email_addresses",
                                description: "Array of email_addresses objects",
                            },
                            urls: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        value: { type: "string", title: "value" },
                                        url_type: { type: "string", title: "url_type" },
                                        integration_params: {
                                            type: "object",
                                            title: "integration_params",
                                            properties: {},
                                        },
                                        linked_account_params: {
                                            type: "object",
                                            title: "linked_account_params",
                                            properties: {},
                                        },
                                    },
                                },
                                title: "urls",
                                description: "Array of urls objects",
                            },
                            first_name: { type: "string", title: "first_name", description: "The first name." },
                            last_name: { type: "string", title: "last_name", description: "The last name." },
                            phone_numbers: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        value: { type: "string", title: "value" },
                                        phone_number_type: { type: "string", title: "phone_number_type" },
                                        integration_params: {
                                            type: "object",
                                            title: "integration_params",
                                            properties: {},
                                        },
                                        linked_account_params: {
                                            type: "object",
                                            title: "linked_account_params",
                                            properties: {},
                                        },
                                    },
                                },
                                title: "phone_numbers",
                                description: "Array of phone_numbers objects",
                            },
                            tags: {
                                type: "array",
                                items: { type: "string", format: "uuid" },
                                title: "tags",
                                description: "Array of tags names",
                            },
                            attachments: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        id: { type: "string", title: "id" },
                                        file_url: { type: "string", title: "file_url" },
                                        file_name: { type: "string", title: "file_name" },
                                        attachment_type: { type: "string", title: "attachment_type" },
                                        integration_params: {
                                            type: "object",
                                            title: "integration_params",
                                            properties: {},
                                        },
                                        linked_account_params: {
                                            type: "object",
                                            title: "linked_account_params",
                                            properties: {},
                                        },
                                    },
                                },
                                title: "attachments",
                                description: "Array of attachments objects ",
                            },
                            merge_categories: {
                                type: "array",
                                categories: {
                                    type: "string",
                                    enum: [
                                        "HRIS",
                                        "ATS",
                                        "Accounting",
                                        "Ticketing",
                                        "File Storage",
                                        "CRM",
                                        "Marketing Automation",
                                    ],
                                    enum_information: [
                                        { value: "HRIS", description: "Merge HRIS Category" },
                                        { value: "ATS", description: "Merge ATS Category" },
                                        { value: "Accounting", description: "Merge Accounting Category" },
                                        { value: "Ticketing", description: "Merge Ticketing Category" },
                                        { value: "File Storage", description: "Merge File Storage Category" },
                                        { value: "CRM", description: "Merge CRM Category" },
                                        {
                                            value: "Marketing Automation",
                                            description: "Merge Marketing Automation Category",
                                        },
                                    ],
                                },
                                title: "Merge Categories",
                                description: "Array of Merge's Unified API Categories",
                            },
                            new_york_city_neighborhood: {
                                type: "string",
                                title: "Borough",
                                description: "One of the 5 Boroughs of New York City",
                            },
                            favorite_tv_shows: {
                                type: "array",
                                items: { type: "string", format: "uuid" },
                                title: "Favorite TV Shows",
                                description: "Array of TV Show objects on merge.tv_shows",
                            },
                            favorite_watch: {
                                type: "string",
                                title: "Favorite Watch",
                                description: "Favorite watch of all time",
                            },
                        },
                    },
                },
            },
            remote_field_classes: { key: "value" },
            status: { linked_account_status: "linked_account_status", can_make_request: true },
            has_conditional_params: true,
            has_required_linked_account_params: true,
        };
        server
            .mockEndpoint()
            .get("/accounting/v1/expense-reports/meta/post")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.expenseReports.metaPostRetrieve();
        expect(response).toEqual({
            requestSchema: {
                type: "object",
                properties: {
                    model: {
                        type: "object",
                        required: [
                            "last_name",
                            "first_name",
                            "merge_categories",
                            "new_york_city_neighborhood",
                            "favorite_tv_shows",
                            "favorite_watch",
                        ],
                        properties: {
                            email_addresses: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        value: {
                                            type: "string",
                                            title: "value",
                                        },
                                        email_address_type: {
                                            type: "string",
                                            title: "email_address_type",
                                        },
                                        integration_params: {
                                            type: "object",
                                            title: "integration_params",
                                            properties: {},
                                        },
                                        linked_account_params: {
                                            type: "object",
                                            title: "linked_account_params",
                                            properties: {},
                                        },
                                    },
                                },
                                title: "email_addresses",
                                description: "Array of email_addresses objects",
                            },
                            urls: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        value: {
                                            type: "string",
                                            title: "value",
                                        },
                                        url_type: {
                                            type: "string",
                                            title: "url_type",
                                        },
                                        integration_params: {
                                            type: "object",
                                            title: "integration_params",
                                            properties: {},
                                        },
                                        linked_account_params: {
                                            type: "object",
                                            title: "linked_account_params",
                                            properties: {},
                                        },
                                    },
                                },
                                title: "urls",
                                description: "Array of urls objects",
                            },
                            first_name: {
                                type: "string",
                                title: "first_name",
                                description: "The first name.",
                            },
                            last_name: {
                                type: "string",
                                title: "last_name",
                                description: "The last name.",
                            },
                            phone_numbers: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        value: {
                                            type: "string",
                                            title: "value",
                                        },
                                        phone_number_type: {
                                            type: "string",
                                            title: "phone_number_type",
                                        },
                                        integration_params: {
                                            type: "object",
                                            title: "integration_params",
                                            properties: {},
                                        },
                                        linked_account_params: {
                                            type: "object",
                                            title: "linked_account_params",
                                            properties: {},
                                        },
                                    },
                                },
                                title: "phone_numbers",
                                description: "Array of phone_numbers objects",
                            },
                            tags: {
                                type: "array",
                                items: {
                                    type: "string",
                                    format: "uuid",
                                },
                                title: "tags",
                                description: "Array of tags names",
                            },
                            attachments: {
                                type: "array",
                                items: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string",
                                            title: "id",
                                        },
                                        file_url: {
                                            type: "string",
                                            title: "file_url",
                                        },
                                        file_name: {
                                            type: "string",
                                            title: "file_name",
                                        },
                                        attachment_type: {
                                            type: "string",
                                            title: "attachment_type",
                                        },
                                        integration_params: {
                                            type: "object",
                                            title: "integration_params",
                                            properties: {},
                                        },
                                        linked_account_params: {
                                            type: "object",
                                            title: "linked_account_params",
                                            properties: {},
                                        },
                                    },
                                },
                                title: "attachments",
                                description: "Array of attachments objects ",
                            },
                            merge_categories: {
                                type: "array",
                                categories: {
                                    type: "string",
                                    enum: [
                                        "HRIS",
                                        "ATS",
                                        "Accounting",
                                        "Ticketing",
                                        "File Storage",
                                        "CRM",
                                        "Marketing Automation",
                                    ],
                                    enum_information: [
                                        {
                                            value: "HRIS",
                                            description: "Merge HRIS Category",
                                        },
                                        {
                                            value: "ATS",
                                            description: "Merge ATS Category",
                                        },
                                        {
                                            value: "Accounting",
                                            description: "Merge Accounting Category",
                                        },
                                        {
                                            value: "Ticketing",
                                            description: "Merge Ticketing Category",
                                        },
                                        {
                                            value: "File Storage",
                                            description: "Merge File Storage Category",
                                        },
                                        {
                                            value: "CRM",
                                            description: "Merge CRM Category",
                                        },
                                        {
                                            value: "Marketing Automation",
                                            description: "Merge Marketing Automation Category",
                                        },
                                    ],
                                },
                                title: "Merge Categories",
                                description: "Array of Merge's Unified API Categories",
                            },
                            new_york_city_neighborhood: {
                                type: "string",
                                title: "Borough",
                                description: "One of the 5 Boroughs of New York City",
                            },
                            favorite_tv_shows: {
                                type: "array",
                                items: {
                                    type: "string",
                                    format: "uuid",
                                },
                                title: "Favorite TV Shows",
                                description: "Array of TV Show objects on merge.tv_shows",
                            },
                            favorite_watch: {
                                type: "string",
                                title: "Favorite Watch",
                                description: "Favorite watch of all time",
                            },
                        },
                    },
                },
            },
            remoteFieldClasses: {
                key: "value",
            },
            status: {
                linkedAccountStatus: "linked_account_status",
                canMakeRequest: true,
            },
            hasConditionalParams: true,
            hasRequiredLinkedAccountParams: true,
        });
    });

    test("remoteFieldClassesList", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "id",
                    display_name: "display_name",
                    remote_key_name: "remote_key_name",
                    description: "description",
                    is_custom: true,
                    is_required: true,
                    field_type: "string",
                    field_format: "string",
                    field_choices: ["field_choices"],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/accounting/v1/expense-reports/remote-field-classes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.expenseReports.remoteFieldClassesList();
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "id",
                    displayName: "display_name",
                    remoteKeyName: "remote_key_name",
                    description: "description",
                    isCustom: true,
                    isRequired: true,
                    fieldType: "string",
                    fieldFormat: "string",
                    fieldChoices: ["field_choices"],
                },
            ],
        });
    });
});
