/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MergeClient } from "../../../src/Client";

describe("SyncStatus", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    model_name: "Invoice",
                    model_id: "accounting.Invoices",
                    last_sync_start: "2021-03-30T19:44:18Z",
                    next_sync_start: "2021-03-30T20:44:18Z",
                    last_sync_result: "SYNCING",
                    last_sync_finished: "2021-03-30T19:55:18Z",
                    status: "SYNCING",
                    is_initial_sync: true,
                    selective_sync_configurations_usage: "IN_NEXT_SYNC",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/accounting/v1/sync-status")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.syncStatus.list();
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    modelName: "Invoice",
                    modelId: "accounting.Invoices",
                    lastSyncStart: new Date("2021-03-30T19:44:18.000Z"),
                    nextSyncStart: new Date("2021-03-30T20:44:18.000Z"),
                    lastSyncResult: "SYNCING",
                    lastSyncFinished: new Date("2021-03-30T19:55:18.000Z"),
                    status: "SYNCING",
                    isInitialSync: true,
                    selectiveSyncConfigurationsUsage: "IN_NEXT_SYNC",
                },
            ],
        });
    });
});
