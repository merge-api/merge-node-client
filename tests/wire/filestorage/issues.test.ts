/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MergeClient } from "../../../src/Client";

describe("Issues", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    status: "ONGOING",
                    error_description: "Missing Permissions",
                    end_user: { key: "value" },
                    first_incident_time: "2022-12-05T16:19:15Z",
                    last_incident_time: "2022-12-05T16:19:15Z",
                    is_muted: true,
                    error_details: ["Missing employee permissions.", "Missing time off permissions."],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/filestorage/v1/issues")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.filestorage.issues.list();
        expect(response).toEqual({
            next: "cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw",
            previous: "cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ",
            results: [
                {
                    id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    status: "ONGOING",
                    errorDescription: "Missing Permissions",
                    endUser: {
                        key: "value",
                    },
                    firstIncidentTime: new Date("2022-12-05T16:19:15.000Z"),
                    lastIncidentTime: new Date("2022-12-05T16:19:15.000Z"),
                    isMuted: true,
                    errorDetails: ["Missing employee permissions.", "Missing time off permissions."],
                },
            ],
        });
    });

    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            status: "ONGOING",
            error_description: "Missing Permissions",
            end_user: { key: "value" },
            first_incident_time: "2022-12-05T16:19:15Z",
            last_incident_time: "2022-12-05T16:19:15Z",
            is_muted: true,
            error_details: ["Missing employee permissions.", "Missing time off permissions."],
        };
        server
            .mockEndpoint()
            .get("/filestorage/v1/issues/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.filestorage.issues.retrieve("id");
        expect(response).toEqual({
            id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            status: "ONGOING",
            errorDescription: "Missing Permissions",
            endUser: {
                key: "value",
            },
            firstIncidentTime: new Date("2022-12-05T16:19:15.000Z"),
            lastIncidentTime: new Date("2022-12-05T16:19:15.000Z"),
            isMuted: true,
            errorDetails: ["Missing employee permissions.", "Missing time off permissions."],
        });
    });
});
