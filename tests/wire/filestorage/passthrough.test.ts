/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MergeClient } from "../../../src/Client";

describe("Passthrough", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });
        const rawRequestBody = { method: "GET", path: "/scooters" };
        const rawResponseBody = {
            method: "GET",
            path: "/scooters",
            status: 200,
            response: { key: "value" },
            response_headers: { "X-Page-Token": "value" },
            response_type: "JSON",
            headers: { "EXTRA-HEADER": "value", Authorization: "<redacted>" },
        };
        server
            .mockEndpoint()
            .post("/filestorage/v1/passthrough")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.filestorage.passthrough.create({
            method: "GET",
            path: "/scooters",
        });
        expect(response).toEqual({
            method: "GET",
            path: "/scooters",
            status: 200,
            response: {
                key: "value",
            },
            responseHeaders: {
                "X-Page-Token": "value",
            },
            responseType: "JSON",
            headers: {
                "EXTRA-HEADER": "value",
                Authorization: "<redacted>",
            },
        });
    });
});
