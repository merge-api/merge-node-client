/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MergeClient } from "../../../src/Client";

describe("Scopes", () => {
    test("default_scopes_retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            common_models: [
                {
                    model_name: "Employee",
                    model_permissions: { READ: { is_enabled: true }, WRITE: { is_enabled: false } },
                    field_permissions: {
                        enabled_fields: [
                            "avatar",
                            "created_at",
                            "custom_fields",
                            "date_of_birth",
                            "first_name",
                            "gender",
                            "remote_created_at",
                            "remote_data",
                        ],
                        disabled_fields: [
                            "company",
                            "employments",
                            "groups",
                            "home_location",
                            "manager",
                            "work_location",
                        ],
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/filestorage/v1/default-scopes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.filestorage.scopes.defaultScopesRetrieve();
        expect(response).toEqual({
            commonModels: [
                {
                    modelName: "Employee",
                    modelPermissions: {
                        READ: {
                            isEnabled: true,
                        },
                        WRITE: {
                            isEnabled: false,
                        },
                    },
                    fieldPermissions: {
                        enabledFields: [
                            "avatar",
                            "created_at",
                            "custom_fields",
                            "date_of_birth",
                            "first_name",
                            "gender",
                            "remote_created_at",
                            "remote_data",
                        ],
                        disabledFields: [
                            "company",
                            "employments",
                            "groups",
                            "home_location",
                            "manager",
                            "work_location",
                        ],
                    },
                },
            ],
        });
    });

    test("linked_account_scopes_retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = {
            common_models: [
                {
                    model_name: "Employee",
                    model_permissions: { READ: { is_enabled: true }, WRITE: { is_enabled: false } },
                    field_permissions: {
                        enabled_fields: [
                            "avatar",
                            "created_at",
                            "custom_fields",
                            "date_of_birth",
                            "first_name",
                            "gender",
                            "remote_created_at",
                            "remote_data",
                        ],
                        disabled_fields: [
                            "company",
                            "employments",
                            "groups",
                            "home_location",
                            "manager",
                            "work_location",
                        ],
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/filestorage/v1/linked-account-scopes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.filestorage.scopes.linkedAccountScopesRetrieve();
        expect(response).toEqual({
            commonModels: [
                {
                    modelName: "Employee",
                    modelPermissions: {
                        READ: {
                            isEnabled: true,
                        },
                        WRITE: {
                            isEnabled: false,
                        },
                    },
                    fieldPermissions: {
                        enabledFields: [
                            "avatar",
                            "created_at",
                            "custom_fields",
                            "date_of_birth",
                            "first_name",
                            "gender",
                            "remote_created_at",
                            "remote_data",
                        ],
                        disabledFields: [
                            "company",
                            "employments",
                            "groups",
                            "home_location",
                            "manager",
                            "work_location",
                        ],
                    },
                },
            ],
        });
    });

    test("linked_account_scopes_create", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });
        const rawRequestBody = {
            common_models: [
                {
                    model_name: "Employee",
                    model_permissions: { READ: { is_enabled: true }, WRITE: { is_enabled: false } },
                    field_permissions: {
                        enabled_fields: ["avatar", "home_location"],
                        disabled_fields: ["work_location"],
                    },
                },
                { model_name: "Benefit", model_permissions: { WRITE: { is_enabled: false } } },
            ],
        };
        const rawResponseBody = {
            common_models: [
                {
                    model_name: "Employee",
                    model_permissions: { READ: { is_enabled: true }, WRITE: { is_enabled: false } },
                    field_permissions: {
                        enabled_fields: [
                            "avatar",
                            "created_at",
                            "custom_fields",
                            "date_of_birth",
                            "first_name",
                            "gender",
                            "remote_created_at",
                            "remote_data",
                        ],
                        disabled_fields: [
                            "company",
                            "employments",
                            "groups",
                            "home_location",
                            "manager",
                            "work_location",
                        ],
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/filestorage/v1/linked-account-scopes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.filestorage.scopes.linkedAccountScopesCreate({
            commonModels: [
                {
                    modelName: "Employee",
                    modelPermissions: {
                        READ: {
                            isEnabled: true,
                        },
                        WRITE: {
                            isEnabled: false,
                        },
                    },
                    fieldPermissions: {
                        enabledFields: ["avatar", "home_location"],
                        disabledFields: ["work_location"],
                    },
                },
                {
                    modelName: "Benefit",
                    modelPermissions: {
                        WRITE: {
                            isEnabled: false,
                        },
                    },
                },
            ],
        });
        expect(response).toEqual({
            commonModels: [
                {
                    modelName: "Employee",
                    modelPermissions: {
                        READ: {
                            isEnabled: true,
                        },
                        WRITE: {
                            isEnabled: false,
                        },
                    },
                    fieldPermissions: {
                        enabledFields: [
                            "avatar",
                            "created_at",
                            "custom_fields",
                            "date_of_birth",
                            "first_name",
                            "gender",
                            "remote_created_at",
                            "remote_data",
                        ],
                        disabledFields: [
                            "company",
                            "employments",
                            "groups",
                            "home_location",
                            "manager",
                            "work_location",
                        ],
                    },
                },
            ],
        });
    });
});
