/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MergeClient } from "../../../src/Client";

describe("WebhookReceivers", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });

        const rawResponseBody = [{ event: "event", is_active: true, key: "key" }];
        server
            .mockEndpoint()
            .get("/filestorage/v1/webhook-receivers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.filestorage.webhookReceivers.list();
        expect(response).toEqual([
            {
                event: "event",
                isActive: true,
                key: "key",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MergeClient({ apiKey: "test", accountToken: "test", environment: server.baseUrl });
        const rawRequestBody = { event: "event", is_active: true };
        const rawResponseBody = { event: "event", is_active: true, key: "key" };
        server
            .mockEndpoint()
            .post("/filestorage/v1/webhook-receivers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.filestorage.webhookReceivers.create({
            event: "event",
            isActive: true,
        });
        expect(response).toEqual({
            event: "event",
            isActive: true,
            key: "key",
        });
    });
});
